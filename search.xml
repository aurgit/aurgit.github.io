<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>To Alice</title>
      <link href="en/2020060144/"/>
      <url>en/2020060144/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“A human being should be able to change a diaper, plan an invasion, butcher a hog, conn a ship, design a building, write a sonnet, balance accounts, build a wall, set a bone, comfort the dying, take orders, give orders, cooperate, act alone, solve equations, analyze a new problem, pitch manure, program a computer, cook a tasty meal, fight efficiently, die gallantly. Specialization is for insects. ”—Robert A. Heinlein</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 高级程序设计</title>
      <link href="cn/2020021200/"/>
      <url>cn/2020021200/</url>
      
        <content type="html"><![CDATA[<h1 id="1-JavaScript-简介"><a href="#1-JavaScript-简介" class="headerlink" title="1. JavaScript 简介"></a>1. JavaScript 简介</h1><h2 id="1-1-JavaScript-简史"><a href="#1-1-JavaScript-简史" class="headerlink" title="1.1 JavaScript 简史"></a>1.1 JavaScript 简史</h2><h3 id="1-1-1-完整-JavaScript-实现"><a href="#1-1-1-完整-JavaScript-实现" class="headerlink" title="1.1.1 完整 JavaScript 实现"></a>1.1.1 完整 JavaScript 实现</h3><ul><li><strong>ECMAScript</strong>：核心。</li><li><strong>DOM</strong>：Docoment Object Model 文档对象模型。<ul><li>针对 XML 但经过扩展用于 HTML 的应用程序编程接口（API: Application Programming Interface）</li></ul></li><li><strong>BOM</strong>：Browser Object Model 浏览器对象模型。</li></ul><h3 id="1-1-2-ECMAScript-实现可能的宿主环境"><a href="#1-1-2-ECMAScript-实现可能的宿主环境" class="headerlink" title="1.1.2 ECMAScript 实现可能的宿主环境"></a>1.1.2 ECMAScript 实现可能的宿主环境</h3><ul><li><strong>Web 浏览器</strong></li><li><strong>Node</strong></li><li><strong>Adobe Flash</strong></li><li>…</li></ul><h2 id="1-2-JavaScript-实现"><a href="#1-2-JavaScript-实现" class="headerlink" title="1.2 JavaScript 实现"></a>1.2 JavaScript 实现</h2><h2 id="1-3-JavaScript-版本"><a href="#1-3-JavaScript-版本" class="headerlink" title="1.3 JavaScript 版本"></a>1.3 JavaScript 版本</h2><h1 id="2-在-HTML-中使用-JavaScript"><a href="#2-在-HTML-中使用-JavaScript" class="headerlink" title="2. 在 HTML 中使用 JavaScript"></a>2. 在 HTML 中使用 JavaScript</h1><h2 id="2-1-lt-script-gt-元素"><a href="#2-1-lt-script-gt-元素" class="headerlink" title="2.1 <script> 元素"></a>2.1 <code>&lt;script&gt;</code> 元素</h2><h3 id="2-1-1-属性"><a href="#2-1-1-属性" class="headerlink" title="2.1.1 属性"></a>2.1.1 属性</h3><ul><li><strong><code>type</code></strong>：必选<ul><li><code>text/javascript</code></li><li><code>text/ecmascript</code></li><li><code>application/javascript</code></li><li><code>application/ecmascript</code></li></ul></li><li><strong><code>src</code></strong>：可选</li><li><strong><code>charset</code></strong>：可选</li><li><strong><code>defer</code></strong>：可选，延迟脚本<ul><li>只适用于外部脚本文件</li><li>脚本在执行时不会影响页面的构造</li><li>脚本将立即下载，但被延迟到整个页面都解析完毕后运行</li><li>HTML5 规范要求脚本按照出现但先后顺序执行，故延迟脚本会先于 <code>DOMContentLoaded</code> 事件按照顺序执行</li><li>最好只包含一个延迟脚本: 现实中延迟脚本不一定按照先后顺序执行，也不一定会在 <code>DOMContentLoaded</code> 事件出发前执行</li></ul></li><li><strong><code>async</code></strong>：可选，异步脚本<ul><li>只适用于外部脚本文件，并告诉浏览器立即下载文件</li><li>不保证按照指定的先后顺序执行</li><li>指定 <code>async</code> 属性的目的是不让页面等待两个脚本下载和执行</li><li>异步脚本不要在加载期间修改 DOM</li><li>异步脚本一定会在页面的 <code>load</code> 事件前执行，但可能会在 <code>DOMContentLoaded</code> 事件之前或之后执行</li></ul></li><li><del><strong><code>language</code></strong>：废弃</del></li></ul><h3 id="2-1-2-使用方式"><a href="#2-1-2-使用方式" class="headerlink" title="2.1.2 使用方式"></a>2.1.2 使用方式</h3><ul><li>直接在页面中嵌入 JavaScript 代码<ul><li>必须指定 <code>type</code> 属性</li><li>代码中不能出现 <code>&lt;/script&gt;</code><ul><li>通过转义字符解决：<code>&lt;\/script&gt;</code></li></ul></li></ul></li><li>包含外部 JavaScript 文件<ul><li>必须指定 <code>src</code> 属性</li><li>下载及解析外部 JavaScript 时，页面的处理会暂时停止</li><li>XHTML 文档中使用，可以将 <code>&lt;/script&gt;</code> 省略为 <code>/&gt;</code> 。HTML 文档中不能使用，不符合 HTML 规范，有时会得不到 IE 正确解析</li><li>带有 <code>src</code> 属性的 <code>&lt;script&gt;</code> 元素中，只会下载并执行外部脚本文件，起始标签之间嵌入的代码会被忽略</li></ul></li></ul><h3 id="2-1-3-引入位置"><a href="#2-1-3-引入位置" class="headerlink" title="2.1.3 引入位置"></a>2.1.3 引入位置</h3><ul><li><strong>放在<code>&lt;script&gt;</code>元素中</strong><ul><li>必须等到全部 JavaScript 代码都被下载、解析和执行完成之后，才开始呈现页面内容。导致页面延迟、空白</li></ul></li><li><strong>放在<code>&lt;body&gt;</code>元素中页面内容的后面</strong><ul><li>解析包含的 JavaScript 代码之前，页面内容就先展示出来</li></ul></li></ul><h2 id="2-2-嵌入代码与外部文件"><a href="#2-2-嵌入代码与外部文件" class="headerlink" title="2.2 嵌入代码与外部文件"></a>2.2 嵌入代码与外部文件</h2><ul><li>嵌入代码与外部文件的有点<ul><li>可维护性</li><li>可缓存</li><li>适应未来</li></ul></li></ul><h2 id="2-3-文档模式"><a href="#2-3-文档模式" class="headerlink" title="2.3 文档模式"></a>2.3 文档模式</h2><h2 id="2-4-lt-noscript-gt-元素"><a href="#2-4-lt-noscript-gt-元素" class="headerlink" title="2.4 <noscript> 元素"></a>2.4 <code>&lt;noscript&gt;</code> 元素</h2><h1 id="3-基本概念"><a href="#3-基本概念" class="headerlink" title="3. 基本概念"></a>3. 基本概念</h1><h2 id="3-1-语法"><a href="#3-1-语法" class="headerlink" title="3.1 语法"></a>3.1 语法</h2><ul><li><p>区分大小写: ECMAScript 中的一切（变量、函数名、操作符）都区分大小写</p></li><li><p>标识符规则</p><ul><li>字母、数字、下划线<code>_</code>、美元符号<code>$</code></li><li>第一个字符必须是字母、下划线或美元符号</li><li>字母可以包含扩展的 ASCII 或 Unicode 字母字符</li><li>采用驼峰大小写格式</li><li>不能用关键字、保留字、true、false 和 null 用作标识符</li></ul></li><li><p>注释</p><ul><li><p>单行注释: </p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 注释内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>块级注释:（第一行和最后一行的星号不是必须的）</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">/</span><span class="token operator">*</span> <span class="token operator">*</span> 注释内容 <span class="token operator">*</span> 注释内容 <span class="token operator">*</span> <span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>严格模式</p><ul><li>在顶部添加代码 <code>"use strict";</code></li><li>严格模式下，ECMAScript 3 中的一些不确定行为将得到处理，某些不安全的操作也会抛出错误</li></ul></li><li><p>语句</p><ul><li>ECMAScript 中的语句以分号 <code>;</code> 结尾</li><li>如果省略分号，则由解析器确定语句的结尾</li><li></li></ul></li></ul><h2 id="3-2-关键字和保留字"><a href="#3-2-关键字和保留字" class="headerlink" title="3.2 关键字和保留字"></a>3.2 关键字和保留字</h2><h3 id="3-2-1-ECMA-262-关键字（debugger-为第五版新增关键字）"><a href="#3-2-1-ECMA-262-关键字（debugger-为第五版新增关键字）" class="headerlink" title="3.2.1 ECMA-262 关键字（debugger 为第五版新增关键字）"></a>3.2.1 ECMA-262 关键字（debugger 为第五版新增关键字）</h3><ul><li>break</li><li>case</li><li>catch</li><li>continue</li><li>debugger</li><li>default</li><li>delete</li><li>do</li><li>else</li><li>finally</li><li>for</li><li>function</li><li>if</li><li>in</li><li>instanceof</li><li>new</li><li>return</li><li>switch</li><li>this</li><li>throw</li><li>try</li><li>typeof</li><li>var</li><li>void</li><li>while</li><li>with</li></ul><h3 id="3-2-2-ECMA-262-保留字-第三版"><a href="#3-2-2-ECMA-262-保留字-第三版" class="headerlink" title="3.2.2 ECMA-262 保留字(第三版)"></a>3.2.2 ECMA-262 保留字(第三版)</h3><ul><li>abstract</li><li>boolean</li><li>byte</li><li>char</li><li>class</li><li>const</li><li>debugger</li><li>double</li><li>enum</li><li>export</li><li>extends</li><li>final</li><li>float</li><li>goto</li><li>implements</li><li>import</li><li>int</li><li>interface</li><li>long</li><li>native</li><li>package</li><li>private</li><li>protected</li><li>public</li><li>short</li><li>static</li><li>super</li><li>synchronized</li><li>throws</li><li>transient</li><li>volatile</li></ul><h3 id="3-2-3-ECMA-262-非严格模式保留字-第五版"><a href="#3-2-3-ECMA-262-非严格模式保留字-第五版" class="headerlink" title="3.2.3 ECMA-262 非严格模式保留字(第五版)"></a>3.2.3 ECMA-262 非严格模式保留字(第五版)</h3><ul><li>class</li><li>const</li><li>enum</li><li>export</li><li>extends</li><li>import</li><li>super</li></ul><h3 id="3-2-4ECMA-262-严格模式追加保留字-第五版"><a href="#3-2-4ECMA-262-严格模式追加保留字-第五版" class="headerlink" title="3.2.4ECMA-262 严格模式追加保留字(第五版)"></a>3.2.4ECMA-262 严格模式追加保留字(第五版)</h3><ul><li>implements</li><li>interface</li><li><strong>let</strong></li><li>package</li><li>private</li><li>protected</li><li>public</li><li>static</li><li><strong>yield</strong></li></ul><h2 id="3-3-变量"><a href="#3-3-变量" class="headerlink" title="3.3 变量"></a>3.3 变量</h2><ul><li>ECMAScript 的变量是 <strong>松散类型</strong> </li><li>松散类型即可以用来保存任何类型的数据，每个变量仅是一个用于保存值的占位符</li><li>未初始化的变量值为 <code>undefined</code></li><li>用 var 操作符定义的变量将成为定义该变量的作用域中的局部变量。 也就是说, 如果在函数中使用 var 定义一个变量,那么这个变量在函数退出后就会被销毁</li><li>一次性定义多个变量: 将每个变量（初始化与否都行）用逗号分隔开，换行和缩进非必须操作<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> strA <span class="token operator">=</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span>    booA <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    numA <span class="token operator">=</span> <span class="token number">365</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-4-数据类型"><a href="#3-4-数据类型" class="headerlink" title="3.4 数据类型"></a>3.4 数据类型</h2><h3 id="3-4-1-分类"><a href="#3-4-1-分类" class="headerlink" title="3.4.1 分类"></a>3.4.1 分类</h3><h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><ul><li><strong><code>Undefined</code></strong></li><li><strong><code>Null</code></strong></li><li><strong><code>Boolean</code></strong></li><li><strong><code>Number</code></strong></li><li><strong><code>String</code></strong></li><li><strong><code>Symbol</code></strong></li></ul><h4 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h4><ul><li><strong><code>Object</code></strong><ul><li><strong><code>Array</code></strong></li><li><strong><code>Date</code></strong></li><li><strong><code>RegExp</code></strong></li><li><strong><code>Function</code></strong></li></ul></li></ul><h3 id="3-4-2-判断数据类型-typeof"><a href="#3-4-2-判断数据类型-typeof" class="headerlink" title="3.4.2 判断数据类型: typeof"></a>3.4.2 判断数据类型: <code>typeof</code></h3><ul><li>返回值<ul><li><code>undefined</code>: 值未定义</li><li><code>boolean</code>: 值为布尔值</li><li><code>string</code>: 值为字符串</li><li><code>number</code>: 值为数值</li><li><code>object</code>: 值为对象或 <code>null</code></li><li><code>function</code>: 值为函数</li></ul></li><li><code>typeof</code> 是操作符而非函数，故括号非必需</li></ul><h3 id="3-4-3-类型详细内容"><a href="#3-4-3-类型详细内容" class="headerlink" title="3.4.3 类型详细内容"></a>3.4.3 类型详细内容</h3><h4 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a><code>undefined</code></h4><ul><li>变量被定义声明但未被初始化时，值为 <code>undefined</code></li><li>值为 <code>underfined</code> 不等同于 未定义变量</li></ul><h4 id="Null"><a href="#Null" class="headerlink" title="Null"></a><code>Null</code></h4><ul><li><code>null</code> 表示一个空<strong>对象</strong>指针，故 <code>typeof</code> 检测 <code>null</code> 会返回 <code>object</code></li><li>如果定义的变量准备在将来用于保存对象,那么最好将该变量初始化为 null 而不是其他值。这样一来,只要直接检查 null 值就可以知道相应的变量是否已经保存了一个对象的引用</li><li>undefined 派生自 null , 故两者的相等性测试要返回 true</li></ul><h4 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a><code>Boolean</code></h4><ul><li><code>true</code>, <code>false</code> 与数字值不是同一类型,故 true 不一定等于 1, 而 false 也不一定等于 0</li><li><code>true</code> <code>false</code> 区分大小写</li><li>ECMAScript 中所有的类型的值都有与 Boolean 对应的值</li><li>要将一个值转换为对应的 Boolean 值,可以调用转型函数 <code>Boolean()</code></li><li>转换规则<table><thead><tr><th>数据类型</th><th>转换为 true 的值</th><th>转换为 false 的值</th></tr></thead><tbody><tr><td>Boolean</td><td>true</td><td>flase</td></tr><tr><td>String</td><td>任何非空字符串</td><td>“(空字符串)”</td></tr><tr><td>Number</td><td>任何非零数值(包括无穷大)</td><td>0, NaN</td></tr><tr><td>Object</td><td>任何对象</td><td>null</td></tr><tr><td>Undefined</td><td>n/a(N/A)</td><td>undefined</td></tr></tbody></table></li></ul><h4 id="Number"><a href="#Number" class="headerlink" title="Number"></a><code>Number</code></h4><ul><li>Number 类型使用 <a href="https://zh.wikipedia.org/wiki/IEEE_754" target="_blank" rel="noopener">IEEE754</a> 格式来表示整数和浮点数值</li><li>各种数值类型字面量格式<ul><li>十进制整数</li><li>八进制<ul><li>第一位是 <code>0</code>, 其后为数字序列(0 ~ 7)</li><li>如果字面值中的数值超出了范围, 则前导零(<code>0</code>)将被忽略,后面的数值当作十进制解析</li><li>八进制在严格模式下无效,会导致 JavaScript 引擎抛出错误</li></ul></li><li>十六进制<ul><li><code>0x</code> 开头</li><li><code>0 ~ 9</code> 及 <code>A ~ F</code> 表示, <code>A ~ F</code> 大小写均可</li></ul></li></ul></li><li>在进行算术计算时候, 所有以八进制和十六进制保湿的数值最终都被转换成十进制数值</li></ul><h5 id="浮点数值"><a href="#浮点数值" class="headerlink" title="浮点数值"></a>浮点数值</h5><ul><li><strong>永远不要测试某个特定的浮点数值</strong></li><li>数值必须包含一个小数点,小数点后面必须至少有一位数字</li><li>小数点前面可以没有整数,但不推荐该写法</li><li>浮点数值的最高精度是 17 位小数,<strong>但是在进行算数运算时精确度远不如整数</strong></li><li>ECMAScript 会将下列浮点数自动转换为整数值存储<ul><li>小数点后没有任何数字(<code>1.</code>)</li><li>浮点数值本身表示的为整数(<code>1.0</code>)</li></ul></li><li>极大或极小数值可以用 e 表示法(科学技术法)表示的浮点数值表示<ul><li>ECMAScript 中 e 表示法的格式也是如此,即前面是一个数值(可以是整数也可以是浮点数) ,中间是一个大写或小写的字母 E,后面是 10 的幂中的指数, 该幂值将用来与前面的数相乘</li></ul></li><li>默认情况下,ECMAScript 会将哪些小数点后面带有6个零以上的浮点数值转换为以 e 表示法表示的数值</li></ul><h5 id="数值范围"><a href="#数值范围" class="headerlink" title="数值范围"></a>数值范围</h5><ul><li>最小数值: <code>Number.MIN_VALUE</code>, 绝大多数浏览器中该值为 <code>5e-324</code></li><li>最大数值: <code>Number.MAX_VALUE</code>, 绝大多数浏览器中该值为 <code>1.7976931348623157e+308</code></li><li>如果某个值超出 JavaScript 数值范围, 则该数值会被自动转换成特殊的 <code>Infinity</code> 值<ul><li>超出范围的正值被转化为 <code>Infinity</code></li><li>超出范围的负值被转化为 <code>-Infinity</code></li><li>如果某次计算返回了正或负的 Infinity 值,那么该值将无法继续参与下一次的计算, 因为 Infinity 不是能够参与计算的数值</li><li>可以使用 <code>isFinite()</code> 函数来判断数值范围是否超标。这个函数在参数位于最小与最大数值之间时会返回 true</li></ul></li></ul><h5 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a><code>NaN</code></h5><ul><li><code>NaN</code> 非数值(Not a Number) 是特殊数值, 用于表示一个本来应该要返回数值的操作数未返回数值的情况(这样避免了抛出错误)</li><li>ECMAScript 中, 任何数值除以非数值会返回 NaN,因此不会影响其他代码的执行</li><li>任何涉及 <code>NaN</code> 的操作都会返回 <code>NaN</code></li><li><code>NaN</code> 与任何值都不相等, 包括 <code>NaN</code> 本身</li><li>可以使用 <code>isNaN()</code> 函数来确定传入参数是否为 <code>NaN</code><ul><li>不是数值的参数会被尝试转换为数值</li><li>任何能被转换为数值的参数都会导致返回 <code>false</code></li><li>任何不能被转换为数值的参数都会导致返回 <code>true</code></li><li>isNaN()确实也适用于对象。 在基于对象调用 isNaN() 函数时,会首先调用对象的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf" target="_blank" rel="noopener">valueOf()</a> 方法,然后确定该方法返回的值是否可以转换为数值。如果不能,则基于这个返回值再调用 toString()方法,再测试返回值。<br>而这个过程也是 ECMAScript 中内置函数和操作符的一般执行流程</li></ul></li></ul><h5 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h5><ul><li>把非数值转换为数值<ul><li><code>Number()</code><ul><li>可以用于任何类型<ul><li>转换规则<ul><li>Boolean: true 和 false 将分别被转换为 1 和 0</li><li>数值型: 简单的传入和返回</li><li>null: 返回 0</li><li>undefined: 返回 NaN</li><li>字符串:<ul><li>字符串中只包含数字 (包括前面带正号或负号的情况): 将其转换为十进制数值, 即”1” 会变成 1,”123”会变成 123,而”011”会变成 11(注意:<strong>前导的零被忽略了</strong>)</li><li>字符串中包含有效的浮点格式(如”1.1”): 将其转换为对应的浮点数值(同样,也会忽略前导零)</li><li>字符串中包含有效的十六进制格式(如”0xf”): 将其转换为相同大小的十进制整数值</li><li>字符串是空的(不包含任何字符): 将其转换为 0</li><li>字符串中包含除上述格式之外的字符: 将其转换为 NaN</li></ul></li></ul></li></ul></li></ul></li><li><code>ParseInt()</code><ul><li>用于把字符串转换为数值</li></ul></li><li><code>parseFloat()</code><ul><li>用于把字符串转换为数值</li></ul></li></ul></li></ul><h2 id="3-5-操作符"><a href="#3-5-操作符" class="headerlink" title="3.5 操作符"></a>3.5 操作符</h2><h2 id="3-6-语句"><a href="#3-6-语句" class="headerlink" title="3.6 语句"></a>3.6 语句</h2><h2 id="3-7-函数"><a href="#3-7-函数" class="headerlink" title="3.7 函数"></a>3.7 函数</h2><h1 id="4-变量、作用域和内存问题"><a href="#4-变量、作用域和内存问题" class="headerlink" title="4. 变量、作用域和内存问题"></a>4. <strong>变量、作用域和内存问题</strong></h1><h2 id="4-1-基本类型和引用类型的值"><a href="#4-1-基本类型和引用类型的值" class="headerlink" title="4.1 基本类型和引用类型的值"></a>4.1 基本类型和引用类型的值</h2><h2 id="4-2-执行环境及作用域"><a href="#4-2-执行环境及作用域" class="headerlink" title="4.2 执行环境及作用域"></a>4.2 执行环境及作用域</h2><h2 id="4-3-垃圾搜集"><a href="#4-3-垃圾搜集" class="headerlink" title="4.3 垃圾搜集"></a>4.3 垃圾搜集</h2><h1 id="5-引用类型"><a href="#5-引用类型" class="headerlink" title="5. 引用类型"></a>5. <strong>引用类型</strong></h1><h2 id="5-1-Object-类型"><a href="#5-1-Object-类型" class="headerlink" title="5.1 Object 类型"></a>5.1 Object 类型</h2><h2 id="5-2-Array-类型"><a href="#5-2-Array-类型" class="headerlink" title="5.2 Array 类型"></a>5.2 Array 类型</h2><h2 id="5-3-Date-类型"><a href="#5-3-Date-类型" class="headerlink" title="5.3 Date 类型"></a>5.3 Date 类型</h2><h2 id="5-4-RegExp-类型"><a href="#5-4-RegExp-类型" class="headerlink" title="5.4 RegExp 类型"></a>5.4 RegExp 类型</h2><h2 id="5-5-Function-类型"><a href="#5-5-Function-类型" class="headerlink" title="5.5 Function 类型"></a>5.5 Function 类型</h2><h2 id="5-6-基本包装类型"><a href="#5-6-基本包装类型" class="headerlink" title="5.6 基本包装类型"></a>5.6 基本包装类型</h2><h2 id="5-7-单体内置对象"><a href="#5-7-单体内置对象" class="headerlink" title="5.7 单体内置对象"></a>5.7 单体内置对象</h2><h1 id="6-面向对象的程序设计"><a href="#6-面向对象的程序设计" class="headerlink" title="6. 面向对象的程序设计"></a>6. <strong>面向对象的程序设计</strong></h1><h2 id="6-1-理解对象"><a href="#6-1-理解对象" class="headerlink" title="6.1 理解对象"></a>6.1 理解对象</h2><h2 id="6-2-创建对象"><a href="#6-2-创建对象" class="headerlink" title="6.2 创建对象"></a>6.2 创建对象</h2><h2 id="6-3-继承"><a href="#6-3-继承" class="headerlink" title="6.3 继承"></a>6.3 继承</h2><h1 id="7-函数表达式"><a href="#7-函数表达式" class="headerlink" title="7. 函数表达式"></a>7. <strong>函数表达式</strong></h1><h2 id="7-1-递归"><a href="#7-1-递归" class="headerlink" title="7.1 递归"></a>7.1 递归</h2><h2 id="7-2-闭包"><a href="#7-2-闭包" class="headerlink" title="7.2 闭包"></a>7.2 闭包</h2><h2 id="7-3-模仿块级作用域"><a href="#7-3-模仿块级作用域" class="headerlink" title="7.3 模仿块级作用域"></a>7.3 模仿块级作用域</h2><h2 id="7-4-私有变量"><a href="#7-4-私有变量" class="headerlink" title="7.4 私有变量"></a>7.4 私有变量</h2><h1 id="8-BOM"><a href="#8-BOM" class="headerlink" title="8. BOM"></a>8. BOM</h1><h2 id="8-1-window-对象"><a href="#8-1-window-对象" class="headerlink" title="8.1 window 对象"></a>8.1 window 对象</h2><h2 id="8-2-location-对象"><a href="#8-2-location-对象" class="headerlink" title="8.2 location 对象"></a>8.2 location 对象</h2><h2 id="8-3-navigator-对象"><a href="#8-3-navigator-对象" class="headerlink" title="8.3 navigator 对象"></a>8.3 navigator 对象</h2><h2 id="8-4-screen-对象"><a href="#8-4-screen-对象" class="headerlink" title="8.4 screen 对象"></a>8.4 screen 对象</h2><h2 id="8-5-history-对象"><a href="#8-5-history-对象" class="headerlink" title="8.5 history 对象"></a>8.5 history 对象</h2><h1 id="9-客户端检测"><a href="#9-客户端检测" class="headerlink" title="9. 客户端检测"></a>9. 客户端检测</h1><h2 id="9-1-能力检测"><a href="#9-1-能力检测" class="headerlink" title="9.1 能力检测"></a>9.1 能力检测</h2><h2 id="9-2-怪癖检测"><a href="#9-2-怪癖检测" class="headerlink" title="9.2 怪癖检测"></a>9.2 怪癖检测</h2><h2 id="9-3-用户代理检测"><a href="#9-3-用户代理检测" class="headerlink" title="9.3 用户代理检测"></a>9.3 用户代理检测</h2><h1 id="10-DOM"><a href="#10-DOM" class="headerlink" title="10. DOM"></a>10. DOM</h1><h2 id="10-1-节点层次"><a href="#10-1-节点层次" class="headerlink" title="10.1 节点层次"></a>10.1 节点层次</h2><h2 id="10-2-DOM-操作技术"><a href="#10-2-DOM-操作技术" class="headerlink" title="10.2 DOM 操作技术"></a>10.2 DOM 操作技术</h2><h1 id="11-DOM-扩展"><a href="#11-DOM-扩展" class="headerlink" title="11. DOM 扩展"></a>11. DOM 扩展</h1><h2 id="11-1-选择符-API"><a href="#11-1-选择符-API" class="headerlink" title="11.1 选择符 API"></a>11.1 选择符 API</h2><h2 id="11-2-元素遍历"><a href="#11-2-元素遍历" class="headerlink" title="11.2 元素遍历"></a>11.2 元素遍历</h2><h2 id="11-3-HTML-5"><a href="#11-3-HTML-5" class="headerlink" title="11.3 HTML 5"></a>11.3 HTML 5</h2><h2 id="11-4-专有扩展"><a href="#11-4-专有扩展" class="headerlink" title="11.4 专有扩展"></a>11.4 专有扩展</h2><h1 id="12-DOM2-和-DOM3"><a href="#12-DOM2-和-DOM3" class="headerlink" title="12. DOM2 和 DOM3"></a>12. DOM2 和 DOM3</h1><h2 id="12-1-DOM-变化"><a href="#12-1-DOM-变化" class="headerlink" title="12.1 DOM 变化"></a>12.1 DOM 变化</h2><h2 id="12-2-样式"><a href="#12-2-样式" class="headerlink" title="12.2 样式"></a>12.2 样式</h2><h2 id="12-3-遍历"><a href="#12-3-遍历" class="headerlink" title="12.3 遍历"></a>12.3 遍历</h2><h2 id="12-4-范围"><a href="#12-4-范围" class="headerlink" title="12.4 范围"></a>12.4 范围</h2><h1 id="13-事件"><a href="#13-事件" class="headerlink" title="13. 事件"></a>13. 事件</h1><h2 id="13-1-事件流"><a href="#13-1-事件流" class="headerlink" title="13.1 事件流"></a>13.1 事件流</h2><h2 id="13-2-事件处理程序"><a href="#13-2-事件处理程序" class="headerlink" title="13.2 事件处理程序"></a>13.2 事件处理程序</h2><h2 id="13-3-事件对象"><a href="#13-3-事件对象" class="headerlink" title="13.3 事件对象"></a>13.3 事件对象</h2><h2 id="13-4-事件类型"><a href="#13-4-事件类型" class="headerlink" title="13.4 事件类型"></a>13.4 事件类型</h2><h2 id="13-5-内存和性能"><a href="#13-5-内存和性能" class="headerlink" title="13.5 内存和性能"></a>13.5 内存和性能</h2><h2 id="13-6-模拟事件"><a href="#13-6-模拟事件" class="headerlink" title="13.6 模拟事件"></a>13.6 模拟事件</h2><h1 id="14-表单脚本"><a href="#14-表单脚本" class="headerlink" title="14. 表单脚本"></a>14. 表单脚本</h1><h2 id="14-1-表单的基础知识"><a href="#14-1-表单的基础知识" class="headerlink" title="14.1 表单的基础知识"></a>14.1 表单的基础知识</h2><h2 id="14-2-文本框脚本"><a href="#14-2-文本框脚本" class="headerlink" title="14.2 文本框脚本"></a>14.2 文本框脚本</h2><h2 id="14-3-选择框脚本"><a href="#14-3-选择框脚本" class="headerlink" title="14.3 选择框脚本"></a>14.3 选择框脚本</h2><h2 id="14-4-表单序列化"><a href="#14-4-表单序列化" class="headerlink" title="14.4 表单序列化"></a>14.4 表单序列化</h2><h2 id="14-5-富文本编辑"><a href="#14-5-富文本编辑" class="headerlink" title="14.5 富文本编辑"></a>14.5 富文本编辑</h2><h1 id="15-使用-Canvas-绘图"><a href="#15-使用-Canvas-绘图" class="headerlink" title="15. 使用 Canvas 绘图"></a>15. 使用 Canvas 绘图</h1><h2 id="15-1-基本用法"><a href="#15-1-基本用法" class="headerlink" title="15.1 基本用法"></a>15.1 基本用法</h2><h2 id="15-2-2D-上下文"><a href="#15-2-2D-上下文" class="headerlink" title="15.2 2D 上下文"></a>15.2 2D 上下文</h2><h2 id="15-3-WebGL"><a href="#15-3-WebGL" class="headerlink" title="15.3 WebGL"></a>15.3 WebGL</h2><h1 id="16-HTML5-脚本编程"><a href="#16-HTML5-脚本编程" class="headerlink" title="16. HTML5 脚本编程"></a>16. HTML5 脚本编程</h1><h2 id="16-1-跨文档消息传递"><a href="#16-1-跨文档消息传递" class="headerlink" title="16.1 跨文档消息传递"></a>16.1 跨文档消息传递</h2><h2 id="16-2-原生拖放"><a href="#16-2-原生拖放" class="headerlink" title="16.2 原生拖放"></a>16.2 原生拖放</h2><h2 id="16-3-媒体元素"><a href="#16-3-媒体元素" class="headerlink" title="16.3 媒体元素"></a>16.3 媒体元素</h2><h2 id="16-4-历史状态管理"><a href="#16-4-历史状态管理" class="headerlink" title="16.4 历史状态管理"></a>16.4 历史状态管理</h2><h1 id="17-错误处理与调试"><a href="#17-错误处理与调试" class="headerlink" title="17. 错误处理与调试"></a>17. 错误处理与调试</h1><h2 id="17-1-浏览器报告的错误"><a href="#17-1-浏览器报告的错误" class="headerlink" title="17.1 浏览器报告的错误"></a>17.1 浏览器报告的错误</h2><h2 id="17-2-错误处理"><a href="#17-2-错误处理" class="headerlink" title="17.2 错误处理"></a>17.2 错误处理</h2><h2 id="17-3-调试技术"><a href="#17-3-调试技术" class="headerlink" title="17.3 调试技术"></a>17.3 调试技术</h2><h2 id="17-4-常见的-IE-错误"><a href="#17-4-常见的-IE-错误" class="headerlink" title="17.4 常见的 IE 错误"></a>17.4 常见的 IE 错误</h2><h1 id="18-JavaScript-与-XML"><a href="#18-JavaScript-与-XML" class="headerlink" title="18. JavaScript 与 XML"></a>18. JavaScript 与 XML</h1><h2 id="18-1-浏览器对-XML-DOM-对支持"><a href="#18-1-浏览器对-XML-DOM-对支持" class="headerlink" title="18.1 浏览器对 XML DOM 对支持"></a>18.1 浏览器对 XML DOM 对支持</h2><h2 id="18-2-浏览器对-XPath-的支持"><a href="#18-2-浏览器对-XPath-的支持" class="headerlink" title="18.2 浏览器对 XPath 的支持"></a>18.2 浏览器对 XPath 的支持</h2><h2 id="18-3-浏览器对-XSLT-的支持"><a href="#18-3-浏览器对-XSLT-的支持" class="headerlink" title="18.3 浏览器对 XSLT 的支持"></a>18.3 浏览器对 XSLT 的支持</h2><h1 id="19-E4X"><a href="#19-E4X" class="headerlink" title="19. E4X"></a>19. E4X</h1><h2 id="19-1-E4X-的类型"><a href="#19-1-E4X-的类型" class="headerlink" title="19.1 E4X 的类型"></a>19.1 E4X 的类型</h2><h2 id="19-2-一般用法"><a href="#19-2-一般用法" class="headerlink" title="19.2 一般用法"></a>19.2 一般用法</h2><h2 id="19-3-其他变化"><a href="#19-3-其他变化" class="headerlink" title="19.3 其他变化"></a>19.3 其他变化</h2><h2 id="19-4-全面启用-E4X"><a href="#19-4-全面启用-E4X" class="headerlink" title="19.4 全面启用 E4X"></a>19.4 全面启用 E4X</h2><h1 id="20-JSON"><a href="#20-JSON" class="headerlink" title="20. JSON"></a>20. JSON</h1><h2 id="20-1-语法"><a href="#20-1-语法" class="headerlink" title="20.1 语法"></a>20.1 语法</h2><h2 id="20-2-解析与序列化"><a href="#20-2-解析与序列化" class="headerlink" title="20.2 解析与序列化"></a>20.2 解析与序列化</h2><h1 id="21-Ajax-与-Comet"><a href="#21-Ajax-与-Comet" class="headerlink" title="21. Ajax 与 Comet"></a>21. Ajax 与 Comet</h1><h2 id="21-1-XMLHttpRequest-对象"><a href="#21-1-XMLHttpRequest-对象" class="headerlink" title="21.1 XMLHttpRequest 对象"></a>21.1 XMLHttpRequest 对象</h2><h2 id="21-2-XMLHttpRequest-2级"><a href="#21-2-XMLHttpRequest-2级" class="headerlink" title="21.2 XMLHttpRequest 2级"></a>21.2 XMLHttpRequest 2级</h2><h2 id="21-3-进度事件"><a href="#21-3-进度事件" class="headerlink" title="21.3 进度事件"></a>21.3 进度事件</h2><h2 id="21-4-跨域源资源共享"><a href="#21-4-跨域源资源共享" class="headerlink" title="21.4 跨域源资源共享"></a>21.4 跨域源资源共享</h2><h2 id="21-5-其它跨域技术"><a href="#21-5-其它跨域技术" class="headerlink" title="21.5 其它跨域技术"></a>21.5 其它跨域技术</h2><h2 id="21-6-安全"><a href="#21-6-安全" class="headerlink" title="21.6 安全"></a>21.6 安全</h2><h1 id="22-高级技巧"><a href="#22-高级技巧" class="headerlink" title="22. 高级技巧"></a>22. 高级技巧</h1><h2 id="22-1-高级函数"><a href="#22-1-高级函数" class="headerlink" title="22.1 高级函数"></a>22.1 高级函数</h2><h2 id="22-2-防篡改对象"><a href="#22-2-防篡改对象" class="headerlink" title="22.2 防篡改对象"></a>22.2 防篡改对象</h2><h2 id="22-3-高级定时器"><a href="#22-3-高级定时器" class="headerlink" title="22.3 高级定时器"></a>22.3 高级定时器</h2><h2 id="22-4-自定义事件"><a href="#22-4-自定义事件" class="headerlink" title="22.4 自定义事件"></a>22.4 自定义事件</h2><h2 id="22-5-拖放"><a href="#22-5-拖放" class="headerlink" title="22.5 拖放"></a>22.5 拖放</h2><h1 id="23-离线应用与客户端存储"><a href="#23-离线应用与客户端存储" class="headerlink" title="23. 离线应用与客户端存储"></a>23. 离线应用与客户端存储</h1><h2 id="23-1-离线检测"><a href="#23-1-离线检测" class="headerlink" title="23.1 离线检测"></a>23.1 离线检测</h2><h2 id="23-2-应用缓存"><a href="#23-2-应用缓存" class="headerlink" title="23.2 应用缓存"></a>23.2 应用缓存</h2><h2 id="23-3-数据存储"><a href="#23-3-数据存储" class="headerlink" title="23.3 数据存储"></a>23.3 数据存储</h2><h1 id="24-最佳实践"><a href="#24-最佳实践" class="headerlink" title="24. 最佳实践"></a>24. 最佳实践</h1><h2 id="24-1-可维护性"><a href="#24-1-可维护性" class="headerlink" title="24.1 可维护性"></a>24.1 可维护性</h2><h2 id="24-2-性能"><a href="#24-2-性能" class="headerlink" title="24.2 性能"></a>24.2 性能</h2><h2 id="24-3-部署"><a href="#24-3-部署" class="headerlink" title="24.3 部署"></a>24.3 部署</h2><h1 id="25-新兴的-API"><a href="#25-新兴的-API" class="headerlink" title="25. 新兴的 API"></a>25. 新兴的 API</h1><h2 id="25-1-requestAnimationFrame"><a href="#25-1-requestAnimationFrame" class="headerlink" title="25.1 requestAnimationFrame()"></a>25.1 requestAnimationFrame()</h2><h2 id="25-2-Page-Visibility-API"><a href="#25-2-Page-Visibility-API" class="headerlink" title="25.2 Page Visibility API"></a>25.2 Page Visibility API</h2><h2 id="25-3-Geolocation-API"><a href="#25-3-Geolocation-API" class="headerlink" title="25.3 Geolocation API"></a>25.3 Geolocation API</h2><h2 id="25-4-File-API"><a href="#25-4-File-API" class="headerlink" title="25.4 File API"></a>25.4 File API</h2><h2 id="25-5-Web-计时"><a href="#25-5-Web-计时" class="headerlink" title="25.5 Web 计时"></a>25.5 Web 计时</h2><h2 id="25-6-Web-Workers"><a href="#25-6-Web-Workers" class="headerlink" title="25.6 Web Workers"></a>25.6 Web Workers</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Read </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Read </tag>
            
            <tag> Frontend </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Guide</title>
      <link href="cn/2019101204/"/>
      <url>cn/2019101204/</url>
      
        <content type="html"><![CDATA[<h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h2><h3 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h3><ul><li><code>git clone [LINK]</code></li></ul><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h3 id="列出所有本地分支"><a href="#列出所有本地分支" class="headerlink" title="列出所有本地分支"></a>列出所有本地分支</h3><ul><li><code>git branch</code></li></ul><h3 id="列出所有远程分支"><a href="#列出所有远程分支" class="headerlink" title="列出所有远程分支"></a>列出所有远程分支</h3><ul><li><code>git branch -r</code></li></ul><h3 id="列出所有分支-本地与远程"><a href="#列出所有分支-本地与远程" class="headerlink" title="列出所有分支(本地与远程)"></a>列出所有分支(本地与远程)</h3><ul><li><code>git branch -a</code></li></ul><h3 id="切换到指定分支并更新工作区"><a href="#切换到指定分支并更新工作区" class="headerlink" title="切换到指定分支并更新工作区"></a>切换到指定分支并更新工作区</h3><ul><li><code>git checkout [branch-name]</code></li></ul><h1 id="真实操作流程演示"><a href="#真实操作流程演示" class="headerlink" title="真实操作流程演示"></a>真实操作流程演示</h1><h2 id="非必要步骤-账户检查"><a href="#非必要步骤-账户检查" class="headerlink" title="非必要步骤: 账户检查"></a>非必要步骤: 账户检查</h2><h3 id="查看当前用户名和邮箱"><a href="#查看当前用户名和邮箱" class="headerlink" title="查看当前用户名和邮箱"></a>查看当前用户名和邮箱</h3><ul><li><code>git config user.name</code></li><li><code>git config user.email</code></li></ul><h3 id="修改项目用户名和邮箱"><a href="#修改项目用户名和邮箱" class="headerlink" title="修改项目用户名和邮箱"></a>修改项目用户名和邮箱</h3><ul><li><p><code>git config user.name [NEW USER NAME]</code></p></li><li><p><code>git config user.email [NEW EMAIL]</code></p></li><li><p>备注: 不推荐操作: 修改全局用户名和邮箱</p><ul><li><code>git config --global user.name [NEW USER NAME]</code></li><li><code>git config --global user.email [NEW EMAIL]</code></li></ul></li></ul><h2 id="下载进入工作环境"><a href="#下载进入工作环境" class="headerlink" title="下载进入工作环境"></a>下载进入工作环境</h2><h3 id="下载-master-分支"><a href="#下载-master-分支" class="headerlink" title="下载 master 分支"></a>下载 master 分支</h3><ul><li><code>git clone [LINK]</code></li></ul><h3 id="切换到刚刚克隆的项目根目录"><a href="#切换到刚刚克隆的项目根目录" class="headerlink" title="切换到刚刚克隆的项目根目录"></a>切换到刚刚克隆的项目根目录</h3><ul><li><code>cd [FOLDER NAME]</code></li></ul><h3 id="列出所有分支"><a href="#列出所有分支" class="headerlink" title="列出所有分支"></a>列出所有分支</h3><ul><li><code>git branch -a</code></li></ul><h3 id="切换到-develop-分支"><a href="#切换到-develop-分支" class="headerlink" title="切换到 develop 分支"></a>切换到 develop 分支</h3><ul><li><code>git checkout [DEVELOP BRANCH NAME]</code></li></ul><h3 id="在-develop-分支上新建自己的-feature-分支-并进入该新建分支"><a href="#在-develop-分支上新建自己的-feature-分支-并进入该新建分支" class="headerlink" title="在 develop 分支上新建自己的 feature 分支(并进入该新建分支)"></a>在 develop 分支上新建自己的 feature 分支(并进入该新建分支)</h3><ul><li><code>git checkout -b [FEATURE NAME]</code></li></ul><h3 id="在远程建立一个和本地一样的分支"><a href="#在远程建立一个和本地一样的分支" class="headerlink" title="在远程建立一个和本地一样的分支"></a>在远程建立一个和本地一样的分支</h3><ul><li><code>git push origin [LOCAL FEATURE NAME]</code></li></ul><h3 id="本地分支和远程分支建立跟踪关系"><a href="#本地分支和远程分支建立跟踪关系" class="headerlink" title="本地分支和远程分支建立跟踪关系"></a>本地分支和远程分支建立跟踪关系</h3><ul><li><code>git branch --set-upstream-to=origin/[REMOTE BRANCH NAME] [LOCAL BRANCH NAME]</code></li></ul><h3 id="查看所有本地和远程分支-并检查本地分支与远程分支对应关系是否正确"><a href="#查看所有本地和远程分支-并检查本地分支与远程分支对应关系是否正确" class="headerlink" title="查看所有本地和远程分支, 并检查本地分支与远程分支对应关系是否正确"></a>查看所有本地和远程分支, 并检查本地分支与远程分支对应关系是否正确</h3><ul><li><code>git branch -a -vv</code></li></ul><h2 id="开始进行具体工作内容"><a href="#开始进行具体工作内容" class="headerlink" title="开始进行具体工作内容"></a>开始进行具体工作内容</h2><ul><li><code>Coding...</code></li></ul><h2 id="工作中小功能完成提交"><a href="#工作中小功能完成提交" class="headerlink" title="工作中小功能完成提交"></a>工作中小功能完成提交</h2><ul><li>提交到仓库区: <code>git commit -am [MESSAGE]</code></li><li>上传本地当前分支到远程对应仓库: <code>git push</code></li></ul><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><ul><li>前提<ul><li>所有工作分支已经 commit 并 push 到远程仓库</li></ul></li><li>合并<ul><li>直接网页上就可以进行操作</li></ul></li></ul><h2 id="非必要操作-清理分支"><a href="#非必要操作-清理分支" class="headerlink" title="非必要操作: 清理分支"></a>非必要操作: 清理分支</h2><h3 id="分支清理"><a href="#分支清理" class="headerlink" title="分支清理"></a>分支清理</h3><ul><li>直接网页上就可以进行操作</li></ul><h2 id="更新本地项目环境-准备下一轮功能开发"><a href="#更新本地项目环境-准备下一轮功能开发" class="headerlink" title="更新本地项目环境, 准备下一轮功能开发"></a>更新本地项目环境, 准备下一轮功能开发</h2><blockquote><p>更多参考资料<br><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">常用Git命令清单_阮一峰</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask Web Dev</title>
      <link href="cn/2018062205/"/>
      <url>cn/2018062205/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章：安装"><a href="#第一章：安装" class="headerlink" title="第一章：安装"></a>第一章：安装</h1><h2 id="1-1-安装Flask"><a href="#1-1-安装Flask" class="headerlink" title="1.1 安装Flask"></a>1.1 安装Flask</h2><ol><li>全局安装（不推荐）  <pre class="line-numbers language-powershell"><code class="language-powershell"> pip install Flask<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>虚拟环境安装<br> 在想要安装虚拟环境的路径下执行系统powershell终端）。  <pre class="line-numbers language-powershell"><code class="language-powershell"> <span class="token comment" spellcheck="true"># 下方命令中“venv”为可自定义虚拟环境文件夹名称</span> <span class="token comment" spellcheck="true"># 方案一：在当前系统环境所包含的第三方软件包基础之上创建混合环境</span> virtualenv <span class="token operator">--</span>system<span class="token operator">-</span>site<span class="token operator">-</span>packages venv <span class="token comment" spellcheck="true"># 方案二：新建全新不含第三方软件包的纯净环境</span> virtualenv venv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>启动环境<br> 执行虚拟环境安装路径中的“cativate”文件（powershell终端可执行“activate.ps1”文件）。  <pre class="line-numbers language-powershell"><code class="language-powershell"> <span class="token punctuation">.</span><span class="token operator">/</span>venv<span class="token operator">/</span>Scripts<span class="token operator">/</span>activate<span class="token punctuation">.</span>ps1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>启动Flask  <ul><li>项目文件设置：设置启动项目文件（当前项目主文件路径下执行下列命令）。  <pre class="line-numbers language-powershell"><code class="language-powershell">  <span class="token comment" spellcheck="true"># name.py为你指定的启动python文件</span>  <span class="token variable">$env</span>:FLASK_APP = <span class="token string">"name.py"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>项目文件设置：设置调试模式。  <pre class="line-numbers language-powershell"><code class="language-powershell">  <span class="token variable">$env</span>:FLASK_DEBUG = <span class="token string">"1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>启动Flask。  <pre class="line-numbers language-powershell"><code class="language-powershell">  flask run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ol><h1 id="第二章：程序的基本结构"><a href="#第二章：程序的基本结构" class="headerlink" title="第二章：程序的基本结构"></a>第二章：程序的基本结构</h1><pre class="line-numbers language-py"><code class="language-py"># Flask程序实例（初始化）from flask import Flaskapp = Flask(__name__)# 路由函数@app.route('/')# 视图函数def index():    return '<h1>Welcome! Aurdes Member</h1>'# 启动服务器# 确保直接执行此脚本时才启动开发Web服务器if __name__ == '__main__':    app.run(debug=True)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-1-基础程序例子"><a href="#2-1-基础程序例子" class="headerlink" title="2.1 基础程序例子"></a>2.1 基础程序例子</h2><h3 id="2-1-1-程序实例-初始化"><a href="#2-1-1-程序实例-初始化" class="headerlink" title="2.1.1 程序实例(初始化)"></a>2.1.1 程序实例(初始化)</h3><ul><li>所有Flask程序都必须创建一个程序实例，程序实例是Flask类的对象。Web服务器使用 <strong>WSGI</strong>（<strong>Web Server Gateway Interface</strong> Web服务器网关接口）协议，将客户端发出的所有请求转交此对象进行处理。</li></ul><h3 id="2-1-2-路由函数"><a href="#2-1-2-路由函数" class="headerlink" title="2.1.2 路由函数"></a>2.1.2 路由函数</h3><ul><li>处理URL和函数之间关系的程序成为 <strong>路由</strong>(<strong>route</strong>)  </li><li>程序实例保存了一个URL到Python函数的映射关系。  </li><li><strong>修饰器</strong> 是Python语言的标准特性，可以使用不同的方式修改函数的行为。通常使用修饰器将函数注册为时间的处理程序。  </li></ul><h3 id="2-1-3-视图函数"><a href="#2-1-3-视图函数" class="headerlink" title="2.1.3 视图函数"></a>2.1.3 视图函数</h3><ul><li>像<code>index()</code>这样的函数成为<strong>视图函数</strong>（<strong>view function</strong>）,上方代码中将<code>index()</code>函数注册为根地址处理程序，访问域名后，服务器会执行<code>index()</code>函数，此函数返回值称为 <strong>响应</strong> ，响应可以为简单文本，也可以是复杂内容。  </li></ul><h3 id="2-1-4-启动服务器"><a href="#2-1-4-启动服务器" class="headerlink" title="2.1.4 启动服务器"></a>2.1.4 启动服务器</h3><ul><li>启动服务的<code>if</code>判断语句确保直接执行当前脚本文件时候才启动开发Web服务器。如果当前脚本由其他脚本引入，程序会认为引用该脚本的上级脚本（父脚本）会启动其他服务器，便不会启动当前脚本的服务器，即执行<code>app.run()</code>。  </li></ul><h3 id="2-1-5-访问测试网站"><a href="#2-1-5-访问测试网站" class="headerlink" title="2.1.5 访问测试网站"></a>2.1.5 访问测试网站</h3><ul><li>设置好启动文件并通过<code>flask run</code>成功启动服务器后，可以在浏览器地址栏输入<code>http://127.0.0.1:5000/</code>来访问测试网站。  </li></ul><h2 id="2-2-请求处理"><a href="#2-2-请求处理" class="headerlink" title="2.2 请求处理"></a>2.2 请求处理</h2><h3 id="2-2-1-上下文"><a href="#2-2-1-上下文" class="headerlink" title="2.2.1 上下文"></a>2.2.1 上下文</h3><ul><li>Flask使用上下文让特定的变量在一个线程中全局可访问  </li><li><strong>线程</strong> 是可单独管理的最小指令集。<strong>进程</strong> 经常使用多个活动线程，有时还会共享内存或文件句柄等资源。多线程服务器会创建一个线程池，线程池中选择一个线程用于处理接收到的请求。</li><li>Flask上下文全局变量：  </li></ul><table><thead><tr><th align="left">变量名</th><th align="left">上下文</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">current_app</td><td align="left">程序上下文</td><td align="left">当前激活程序的程序实例</td></tr><tr><td align="left">g</td><td align="left">程序上下文</td><td align="left">处理请求时用作临时存储的对象，每次请求都会重置此变量</td></tr><tr><td align="left">request</td><td align="left">请求上下文</td><td align="left">请求对象，封装了客户端发出的HTTP请求内容</td></tr><tr><td align="left">session</td><td align="left">请求上下文</td><td align="left">用户会话，用于存储请求之间需要“记住”的值的词典</td></tr></tbody></table><h3 id="2-2-2-推送与请求"><a href="#2-2-2-推送与请求" class="headerlink" title="2.2.2 推送与请求"></a>2.2.2 推送与请求</h3><ul><li><strong>推送</strong> :必须要先经过推送程序和请求上下文，才能分发请求，请求处理完再将其删除。相关信息被推送后，才能正常使用上下文全局变量。  </li><li><strong>钩子函数</strong>: 为了避免在每个视图函数中都使用重复代码，Flask提供了注册通用函数的功能，注册的函数可在请求被分发到视图函数之前或之后调用。Flask支持的4种钩子注册如下：<ul><li><strong>before_first_requet</strong>: 在处理第一个请求之前运行  </li><li><strong>before_request</strong>: 在每次请求之前运行  </li><li><strong>after_request</strong>: 如果没有未处理的异常抛出，在每次请求之后运行  </li><li><strong>teardown_request</strong>: 即使有未处理的异常抛出，也在每次请求之后运行  </li></ul></li><li>请求钩子函数和视图函数之间共享数据一般使用上下文全局变量<code>g</code>  </li></ul><h2 id="2-3-响应"><a href="#2-3-响应" class="headerlink" title="2.3 响应"></a>2.3 响应</h2><ul><li><strong>视图函数返回值</strong> 响应: <code>响应文本,状态码,字典</code> 。<strong>状态码</strong> 用来表明不同相应状态。  </li><li><strong>response</strong> 响应 : <code>make_response()</code>函数可接受1、2或3个参数，并返回一个<code>response</code>对象。  </li><li><strong>重定向</strong> 响应: 没有页面文档，将响应引导到一个新的地址。重定向响应可使用3个值形式的返回值，也可在<code>response</code>对象中设置。Flask提供<code>redirect()</code>函数用于重定向响应，如<code>return redirect('http://www.ezhq.xyz')</code>  </li><li><strong>abort</strong> 响应: 此响应用于处理错误，<code>abort</code> 不会将控制权交还给调用它的函数，而是抛出异常把控制权交给Web服务器。如：<code>abort(404)</code>  </li></ul><h2 id="2-4-扩展"><a href="#2-4-扩展" class="headerlink" title="2.4 扩展"></a>2.4 扩展</h2><h3 id="2-4-1-基础扩展添加实例"><a href="#2-4-1-基础扩展添加实例" class="headerlink" title="2.4.1 基础扩展添加实例"></a>2.4.1 基础扩展添加实例</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> flask<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>script <span class="token keyword">import</span> Manager<span class="token comment" spellcheck="true"># new method</span><span class="token comment" spellcheck="true"># from flask_script import Manager</span>app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>manager <span class="token operator">=</span> Manager<span class="token punctuation">(</span>app<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'&lt;h1>Hello Veng~~&lt;/h1>'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    manager<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>Flask-Script</strong> 为一个Flask扩展，为Flask程序添加一命令行解析器。自带一组常用选项，且支持自定义命令。  </li><li><code>pip</code> 形式安装Flask-Script: 激活虚拟环境后执行以下命令进行安装：<pre class="line-numbers language-pyton"><code class="language-pyton">  python -m pip install flask-script<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  有两点需要注意：  <ol><li>在Windows下命令行中，虚拟环境下直接输入书中<code>pip...</code>命令不一定成功，可以使用命令<code>python -m pip...</code>代替。  </li><li>在国内网络环境下，电脑使用默认DNS有一定几率无法访问到需要下载的网络，可以通过更换电脑默认DNS来解决，DNS推荐（202.141.176.99）。  </li></ol></li></ul><h1 id="第三章：模板"><a href="#第三章：模板" class="headerlink" title="第三章：模板"></a>第三章：模板</h1><h2 id="Jinja2"><a href="#Jinja2" class="headerlink" title="Jinja2"></a>Jinja2</h2><ul><li>默认情况下，Flask在程序文件夹中的templates子文件夹中寻找模板。  </li><li>在python文件中，使用<code>from flask import Flask, render_template</code>命令来实现把<code>Jinja2</code>模板引擎集成到程序中。</li><li><code>render_template</code>函数的第一个参数是模板的文件名。随后的参数是键值对（表示模板中变量对应的真实值），键值对<code>=</code>h号左侧表示参数名（模板中占位符），右侧为当前作用于中的变量（即同名参数的值）。</li><li>Jinja2</li></ul><h1 id="附-涉及到的扩展及其安装"><a href="#附-涉及到的扩展及其安装" class="headerlink" title="附: 涉及到的扩展及其安装"></a>附: 涉及到的扩展及其安装</h1><ul><li><p><strong>Flask-Moment</strong><br>Flask程序扩展，能把 <code>moment.js</code>（可以在浏览器中渲染日期和时间） 集成到 <code>Jinja2</code> 模板中。<br><code>pip install flask-moment</code> </p></li><li><p><strong>Flask-Bootstrap</strong><br>Flask 扩展，简化在程序中继承Bootstrap的过程。Bootstrap 是Twitter开发的一个开源框架，提供的用户界面组件可用于创建简洁有吸引力的网页，并兼容所有现代Web浏览器。<br>Bootstrap是客户端框架（不涉及服务器）.<br><code>pip install flask-bootstrap</code> </p></li><li><p><strong>Flask-WTF</strong><br>Flask 扩展，将处理 Web 表单的过程简单化，对独立的 WTForm 包进行包装，方便集成到 Flask 中。<br><code>pip install flask-wtf</code>  </p></li><li><p><strong>Flask-SQLAlchemy</strong><br>Flask 扩展，简化在Flask程序中使用 SQLAlchemy 的操作。<br><code>pip install flask-sqlalchemy</code>  </p></li><li><p><strong>Flask-Migrate</strong><br>Flask 扩展，对 Alembic 做了轻量级包装并集成到 Flask-Script中，所有操作都通过Flask-Script命令完成。<br>Alembic 是SQLAlchemy的主力开发人员编写的一个数据库迁移框架，数据库迁移框架能够最终数据库<strong>模式</strong>的变化，然后增量式地把变化应用到数据库中。<br><code>pip install flask-migrate</code>  </p></li><li><p><strong>Flask-Mail</strong><br>Flask 扩展，连接到简单邮件传输协议（SMTP Simple Mail Transfer Protocol）服务器，并把邮件交给此服务器发哦是那个。若不进行配置，着会连接 localhost 上的25端口，无需验证即可发送电子邮件。<br><code>pip install flask-mail</code></p></li></ul><h1 id="附2：一些Python命令"><a href="#附2：一些Python命令" class="headerlink" title="附2：一些Python命令"></a>附2：一些Python命令</h1><ul><li><strong>pip 升级</strong>：<code>python -m pip install --upgrade pip</code>  </li><li><strong>自动生成项目需求文件</strong>：<code>pip freeze &gt;requirements.txt</code>  </li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Read </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Read </tag>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML与CSS基础课程学习笔记</title>
      <link href="cn/2017102202/"/>
      <url>cn/2017102202/</url>
      
        <content type="html"><![CDATA[<h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><ul><li>无 </li></ul><h2 id="学习预期结果"><a href="#学习预期结果" class="headerlink" title="学习预期结果"></a>学习预期结果</h2><ul><li>学习HTML、CSS样式基础知识 </li><li>利用HTML、CSS样式技术制作出简单页面 </li></ul><h1 id="HTML介绍"><a href="#HTML介绍" class="headerlink" title="HTML介绍"></a>HTML介绍</h1><h2 id="代码初体验：制作我的第一个网页"><a href="#代码初体验：制作我的第一个网页" class="headerlink" title="代码初体验：制作我的第一个网页"></a>代码初体验：制作我的第一个网页</h2><h2 id="HTML和CSS的关系"><a href="#HTML和CSS的关系" class="headerlink" title="HTML和CSS的关系"></a>HTML和CSS的关系</h2><ul><li><strong>HTML是网页内容的载体</strong>。内容就是网页制作者放在页面上想要让用户浏览的信息，可以包含文字、图片、视频等。 </li><li><strong>CSS样式就是表现</strong>。就像网页的外衣。比如，标题字体、颜色变化，或为标题加入背景图片、边框等。所有这些用来改变内容外观的东西称之为表现。 </li><li><strong>JavaScipt是用来实现网页上的特殊效果</strong>。如：鼠标滑过弹出下拉菜单。或鼠标滑过表格的背景颜色改变。还有焦点新闻（新闻图片）的轮换。可以这么理解，有动画的，有交互的一般都是用JavaScript来实现的。 </li></ul><h2 id="认识HTML标签"><a href="#认识HTML标签" class="headerlink" title="认识HTML标签"></a>认识HTML标签</h2><ul><li><strong>标题</strong> <code>&lt;h1&gt;标题内容&lt;/h1&gt;</code> </li><li><strong>段落</strong> <code>&lt;p&gt;段落内容&lt;/p&gt;</code> </li><li><strong>图片</strong> <code>&lt;img src="图片名字.图片格式"&gt;</code> </li></ul><h2 id="标签语法"><a href="#标签语法" class="headerlink" title="标签语法"></a>标签语法</h2><ul><li>HTML标签不区分大小写，<code>&lt;h1&gt;</code>和<code>&lt;H1&gt;</code>作用一样 </li></ul><h2 id="认识HTML文件基本结构"><a href="#认识HTML文件基本结构" class="headerlink" title="认识HTML文件基本结构"></a>认识HTML文件基本结构</h2><ul><li><code>&lt;html&gt;&lt;/html&gt;</code>为根标签，所有的网页标签都在<code>&lt;html&gt;&lt;/html&gt;</code>中 </li><li><code>&lt;head&gt;</code>标签用于定义文档的头部，是所有头部元素的容器。 </li><li>头部元素有：<code>&lt;tittle&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;style&gt;</code>、<code>&lt;link&gt;</code>、<code>&lt;meta&gt;</code>等标签 </li><li><code>&lt;body&gt;&lt;/body&gt;</code>之间的内容是网页的主要内容，如<code>&lt;h1&gt;`` &lt;p&gt; ``&lt;a&gt;`` &lt;img&gt;</code>等网页内容标签，在这里的标签中的内容会在浏览器中显示出来 </li></ul><h2 id="认识head标签"><a href="#认识head标签" class="headerlink" title="认识head标签"></a>认识head标签</h2><ul><li><code>&lt;head&gt;</code>是文档的头部标签，描述了文档的各种属性和信息，大多数文档头部数据不会作为内容显示给读者 </li><li>可用在<code>&lt;head&gt;</code>部分的标签： <pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token number">...</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token operator">...</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><code>&lt;title&gt;&lt;/title&gt;</code>标签之间的文字内容是网页的标题信息，会出现在浏览器的标题栏中。 </li></ul><h2 id="了解HTML的代码注释"><a href="#了解HTML的代码注释" class="headerlink" title="了解HTML的代码注释"></a>了解HTML的代码注释</h2><ul><li><code>&lt;!--注释文字--&gt;</code> </li></ul><h1 id="认识标签-1"><a href="#认识标签-1" class="headerlink" title="认识标签_1"></a>认识标签_1</h1><h2 id="语义化"><a href="#语义化" class="headerlink" title="语义化"></a>语义化</h2><ul><li>标签学习要点：标签用途，标签在浏览器中的默认样式 </li><li>语义化：明白每个标签的用途（即在什么情况下使用此标签合理） </li><li>语义化的目的：1.更容易被搜索引擎收录 2.更容易让屏幕阅读器读出网页内容 </li></ul><h2 id="body标签：网页内容"><a href="#body标签：网页内容" class="headerlink" title="body标签：网页内容"></a>body标签：网页内容</h2><ul><li>网页上显示的内容要放在<code>&lt;body&gt;&lt;/body&gt;</code>标签中 </li></ul><h2 id="p标签：段落"><a href="#p标签：段落" class="headerlink" title="p标签：段落"></a>p标签：段落</h2><ul><li>一段文字一个<code>&lt;p&gt;&lt;/p&gt;</code>标签 </li><li><code>&lt;p&gt;</code>标签的默认样式为段前段后都会有空白行 </li></ul><h2 id="hx标签：网页标题"><a href="#hx标签：网页标题" class="headerlink" title="hx标签：网页标题"></a>hx标签：网页标题</h2><ul><li><code>&lt;hx&gt;&lt;/hx&gt;</code>为标题标签，x取值为1-6，对应不同等级的标题，<code>&lt;h1&gt;</code>为最高等级标题 </li><li><code>&lt;h1&gt;</code>标签一般用在网站名称上 </li></ul><h2 id="strong和em标签：强调语气"><a href="#strong和em标签：强调语气" class="headerlink" title="strong和em标签：强调语气"></a>strong和em标签：强调语气</h2><ul><li><code>&lt;em&gt;&lt;/em&gt;</code>表示一般程度强调，被强调内容斜体显示 </li><li><code>&lt;strong&gt;&lt;/strong&gt;</code>表示更加强烈的强调，被强调内容默认粗体显示 </li></ul><h2 id="span标签：文字单独样式"><a href="#span标签：文字单独样式" class="headerlink" title="span标签：文字单独样式"></a>span标签：文字单独样式</h2><ul><li><code>&lt;span&gt;&lt;/span&gt;</code>为内容单独设置特殊样式,具体样式在<code>&lt;head&gt;</code>标签内<code>&lt;style&gt;</code>标签内通过<code>span{}</code>单独设置 </li></ul><h2 id="q标签：短文本引用"><a href="#q标签：短文本引用" class="headerlink" title="q标签：短文本引用"></a>q标签：短文本引用</h2><ul><li><code>&lt;q&gt;&lt;/q&gt;</code>用来引用别处非自己创作的语句，被引用语句无须手动添加双引号，默认被引用内容会被自动添加上双引号 </li></ul><h2 id="blockquote标签：长文本引用"><a href="#blockquote标签：长文本引用" class="headerlink" title="blockquote标签：长文本引用"></a>blockquote标签：长文本引用</h2><ul><li><code>&lt;blockquote&gt;&lt;/blockquote&gt;</code>标签用来对大段文字进行引用，对于被引用内容，显示时候会进行左右缩进处理 </li></ul><h2 id="r标签：分行显示文本"><a href="#r标签：分行显示文本" class="headerlink" title="r标签：分行显示文本"></a>r标签：分行显示文本</h2><ul><li><code>&lt;br /&gt;</code>放在需要换行的文段末尾，相当于word文档的回车 </li><li>xhtml1.0写法：<code>&lt;br /&gt;</code> html4.01写法：<code>&lt;br&gt;</code> </li><li><code>&lt;br /&gt;</code>标签为空标签，即没有具体HTML内容，类似标签有<code>&lt;br /&gt;</code>、<code>&lt;hr /&gt;</code>和<code>&lt;img /&gt;</code> </li><li>在HTML代码中的回车、空格是被直接忽略的 </li></ul><h2 id="nbsp-网页中添加空格"><a href="#nbsp-网页中添加空格" class="headerlink" title="&nbsp;网页中添加空格"></a>&nbsp;网页中添加空格</h2><ul><li><code>&amp;nbsp;</code>代表文本中的一个空格 </li></ul><h2 id="hr标签：添加水平横线"><a href="#hr标签：添加水平横线" class="headerlink" title="hr标签：添加水平横线"></a>hr标签：添加水平横线</h2><ul><li>html4.01版本：<code>&lt;hr&gt;</code> </li><li>html1.0版本（一般使用）：<code>&lt;hr /&gt;</code> </li></ul><h2 id="address标签：网页地址信息"><a href="#address标签：网页地址信息" class="headerlink" title="address标签：网页地址信息"></a>address标签：网页地址信息</h2><ul><li><code>&lt;address&gt;&lt;/address&gt;</code>用来定义一个地址、签名或作者身份等需要在网页中展示出来用于联系的信息 </li><li>例子：`<address>作者：<a href="mailto:example@mail.com">example</a></address> </li><li><code>&lt;address&gt;</code>标签内容显示样式默认为斜体 </li></ul><h2 id="code标签：加入一行代码"><a href="#code标签：加入一行代码" class="headerlink" title="code标签：加入一行代码"></a>code标签：加入一行代码</h2><ul><li><code>&lt;code&gt;&lt;/code&gt;</code>只用于插入一行较短的代码，多行代码用<code>&lt;code&gt;&lt;/code&gt;</code>标签 </li></ul><h2 id="pre标签：加入大段代码"><a href="#pre标签：加入大段代码" class="headerlink" title="pre标签：加入大段代码"></a>pre标签：加入大段代码</h2><ul><li><code>&lt;pre&gt;&lt;/pre&gt;</code>标签作用：预格式化文本，在标签中的文本通常会保留空格和换行符，而不必再手动输入<code>&lt;br&gt;``&amp;nbsp;</code>。此标签并不只是为显示计算机源码使用，需要在网页中预显示格式时都可以使用此标签 </li></ul><h1 id="认识标签-2"><a href="#认识标签-2" class="headerlink" title="认识标签_2"></a>认识标签_2</h1><h2 id="ul标签：无序列表"><a href="#ul标签：无序列表" class="headerlink" title="ul标签：无序列表"></a>ul标签：无序列表</h2><ul><li><code>&lt;ul&gt;...&lt;/ul&gt;</code>标签用来排列无先后顺序的信息列表 </li><li>语法：<pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      ......  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="ol标签：有序列表"><a href="#ol标签：有序列表" class="headerlink" title="ol标签：有序列表"></a>ol标签：有序列表</h2><ul><li><code>&lt;ol&gt;...&lt;/ol&gt;</code>标签一般用来进行有先后顺序需要的信息的显示,标签内文本自动标序号 </li><li>语法：<pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>信息1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>信息2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      ......  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="div标签：独立逻辑容器"><a href="#div标签：独立逻辑容器" class="headerlink" title="div标签：独立逻辑容器"></a>div标签：独立逻辑容器</h2><ul><li><code>&lt;div&gt;...&lt;/div&gt;</code>标签用于将相互独立的内容相互分隔开来，如网页中不同栏目 </li></ul><h2 id="div-id-”…”标签命名"><a href="#div-id-”…”标签命名" class="headerlink" title="div id=”…”标签命名"></a>div id=”…”标签命名</h2><ul><li><code>&lt;div id=""&gt;...&lt;/div&gt;</code>标签用于给标签自定义名称，便于理解使用 </li><li>用法：<pre class="line-numbers language-html"><code class="language-html">  &lt;div id="板块名称“>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="table标签：表格"><a href="#table标签：表格" class="headerlink" title="table标签：表格"></a>table标签：表格</h2><ul><li><p>表格标签关键元素：table、tbody、tr、th、td </p></li><li><p><code>&lt;table&gt;...&lt;/table&gt;</code>:整个标签的最外围 </p></li><li><p><code>&lt;tbody&gt;...&lt;/tbody&gt;</code>:加上此标签后，此标签包含的内容在下载完后优先显示，而不用等到整个表格加载结束后再显示。若不加此标签，则整个表格加载完之后才会显示。用此标签分段，可以对表格分部分进行尽快显示 </p></li><li><p><code>&lt;tr&gt;...&lt;/tr&gt;</code>:表格的行，有几对此标签，表格就有几行 </p></li><li><p><code>&lt;td&gt;...&lt;/td&gt;</code>:表格的列，一行中包含几对此标签，该行就有几列 </p></li><li><p><code>&lt;th&gt;...&lt;/th&gt;</code>:表格表头，表格头部的一个单元格 </p></li><li><p>表格中列的个数，取决于一行中数据单元格的个数。表头默认粗体居中显示 </p></li><li><p>table表格在没有添加CSS样式之前，在浏览器中没有表格之间的分割线 </p></li><li><p>例子：</p><pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>产品名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>品牌<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>库存量（个）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>入库时间<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>耳机<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>联想<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>500<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2008-08-08<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>U盘<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>金士顿<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>120<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2009-09-09<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://res.cloudinary.com/imgcave/image/upload/v1592661381/Img/BlogCover/3_5_table%E6%A0%87%E7%AD%BE_%E9%85%8D%E5%9B%BE_1_b4bfnn.png" alt="3_5_table标签_配图_1"></p></li></ul><h2 id="表格边框"><a href="#表格边框" class="headerlink" title="表格边框"></a>表格边框</h2><ul><li>添加CSS代码，为上一小节表格添加边框 </li><li>添加的部分CSS代码(在head标签内)：<pre class="line-numbers language-html"><code class="language-html">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>      ...          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">          <span class="token selector">table tr td,th</span><span class="token punctuation">{</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token punctuation">}</span>          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>      ...      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>代码与效果图 </p><pre class="line-numbers language-html"><code class="language-html">      <span class="token doctype">&lt;!DOCTYPE HTML></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>为表格添加边框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">      <span class="token selector">table tr td,th</span><span class="token punctuation">{</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token punctuation">}</span>      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>产品名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>品牌<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>库存量（个）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>入库时间<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>耳机<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>联想<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>500<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2008-08-08<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>U盘<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>金士顿<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>120<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2009-09-09<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://res.cloudinary.com/imgcave/image/upload/v1592661480/Img/BlogCover/3_6_%E8%A1%A8%E6%A0%BC%E7%BE%8E%E5%8C%96_%E9%85%8D%E5%9B%BE_1_kupbzm.png" alt="3_6_表格美化_配图_1"></p></li></ul><h2 id="caption标签：表格标题和摘要"><a href="#caption标签：表格标题和摘要" class="headerlink" title="caption标签：表格标题和摘要"></a>caption标签：表格标题和摘要</h2><ul><li><p>表格标题：用来描述表格内容，标题默认显示在表格上方 </p></li><li><p>表格标题用法：</p><pre class="line-numbers language-html"><code class="language-html">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>标题文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>              ...          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      ...      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>表格摘要：表格摘要的内容不会在浏览器视图中显示出来，它的作用是增加表格的可读性（语义化），使搜索引擎更好地理解表格内容，也可使屏幕阅读器更好地阅读表格内容 </p></li><li><p>表格摘要用法：</p><pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">summary</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>表格摘要文本<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h1 id="认识标签-3"><a href="#认识标签-3" class="headerlink" title="认识标签_3"></a>认识标签_3</h1><h2 id="a标签：链接"><a href="#a标签：链接" class="headerlink" title="a标签：链接"></a>a标签：链接</h2><ul><li><p><code>&lt;a&gt;</code>标签用来实现超链接 </p></li><li><p>用法：</p><pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>目标网址<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>鼠标划过显示的文本<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接显示文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>带<code>&lt;a&gt;</code>标签的文字会自动默认为蓝色，可以用CSS自定义颜色 </p></li><li><p><code>&lt;a&gt;</code>标签的超链接默认在当前页面打开，若需要在新标签打开超链接，方法为：</p><pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>目标地址<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>鼠标划过显示的文本<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接显示文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="mailto标签：邮件发送"><a href="#mailto标签：邮件发送" class="headerlink" title="mailto标签：邮件发送"></a>mailto标签：邮件发送</h2><ul><li><p><code>&lt;a&gt;</code>标签何以搭配<code>&lt;mailto&gt;</code>进行超链接发送邮件，也就是点击某个超链接后，自动打开发送邮件的应用，进行邮件填写与发送 </p></li><li><p>用法：</p><pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mailto:邮箱地址1;邮箱地址2?cc<span class="token punctuation">=</span>抄送地址1;抄送地址2&amp;bcc<span class="token punctuation">=</span>密件抄送地址1;密件抄送地址2&amp;subject<span class="token punctuation">=</span>邮件主题&amp;body<span class="token punctuation">=</span>邮件内容<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>参数解释 </p><ul><li><em>mailto</em>：邮箱地址。点击链接后，浏览器会自动调用浏览者系统默认的电子邮件客户端，并在收件人一栏自动填上该关键词设置的收件人的地址 </li><li><em>cc</em>：抄送地址 </li><li><em>bcc</em>：密件抄送地址 </li><li><em>;</em>：分隔符。用于分隔多个邮箱地址，实现同时发送或抄送给多个人邮件 </li><li><em>subject</em>：邮件主题 </li><li><em>body</em>：邮件内容 </li></ul></li><li><p>如果mailto后面同时有多个参数，则第一个参数必须以<code>?</code>开头，后续参数相互之间用<code>&amp;</code>分隔开来 </p></li></ul><h2 id="img标签：图片插入"><a href="#img标签：图片插入" class="headerlink" title="img标签：图片插入"></a>img标签：图片插入</h2><ul><li><p><code>&lt;img&gt;</code>标签用于在网页插入图片 </p></li><li><p>用法：</p><pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片地址<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片显示失败时显示文本<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提示文本<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>参数说明 </p><ul><li><em>src</em>：图片的地址 </li><li><em>alt</em>：图片的描述性文字，当图片显示失败，会在图片本应显示的地方显示此参数内的文字 </li><li><em>title</em>：鼠标划过是显示的文字内容 </li></ul></li><li><p>图片格式可以为GIF、PNG、JPEG </p></li></ul><h1 id="与浏览者交互：表单标签"><a href="#与浏览者交互：表单标签" class="headerlink" title="与浏览者交互：表单标签"></a>与浏览者交互：表单标签</h1><h2 id="form标签：表单标签"><a href="#form标签：表单标签" class="headerlink" title="form标签：表单标签"></a>form标签：表单标签</h2><ul><li><p><code>&lt;form&gt;</code>标签用来与访问者进行交互。该标签可以把访问者输入的数据传送到服务器端，使服务器端程序对传回的数据进行处理 </p></li><li><p>用法 </p><pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>传送方式<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>服务器文件<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  ......  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>参数解释 </p><ul><li><em><code>&lt;form&gt;...&lt;/form&gt;</code></em>：表单标签。所有表单内容在此标签内实现 </li><li><em>action</em>：表单数据被传输的目的地，可以是一个PHP页面（如save.php） </li><li><em>method</em>：表单数据传输方式（get/post），具体实现属于后端 </li><li>所有表单控件，如文本框、文本域、按钮、单选框、复选框等，都必须放在<code>&lt;form&gt;</code>标签内，否则会使预期完整表单数据无法完整传输 </li></ul></li><li><p>例子 </p><pre class="line-numbers language-html"><code class="language-html">  <span class="token doctype">&lt;!DOCTYPE HTML></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>表单标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>save.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>密码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pass<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>确定<span class="token punctuation">"</span></span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>重置<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://res.cloudinary.com/imgcave/image/upload/v1592661530/Img/BlogCover/5_1_%E8%A1%A8%E5%8D%95%E6%A0%87%E7%AD%BE_%E9%85%8D%E5%9B%BE_1_dzp6sp.png" alt="5_1_表单标签_配图_1"></p></li></ul><h2 id="input标签：文本输入框、密码输入框"><a href="#input标签：文本输入框、密码输入框" class="headerlink" title="input标签：文本输入框、密码输入框"></a>input标签：文本输入框、密码输入框</h2><ul><li><p><em><code>&lt;input&gt;</code></em>标签：用来进行文本输入或密码输入 </p></li><li><p>用法 </p><pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>输入类型选择<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>文本框名称<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>输入框默认值设定<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>参数解释 </p><ul><li><em>type</em>：输入类型选择。选择值： <ul><li><em>text</em>：文本输入，正常显示输入的字符 </li><li><em>password</em>：密码输入，输入的字符会被黑色实心圆点代替 </li></ul></li><li><em>name</em>：文本框名称，用于后台识别用途 </li><li><em>value</em>：文本框默认内容，用于提示 </li></ul></li><li><p>例子 </p><pre class="line-numbers language-html"><code class="language-html">      <span class="token doctype">&lt;!DOCTYPE HTML></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>文本输入框、密码输入框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span>  <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>save.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          账户:           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name"myName"</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>          密码:           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pass<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://res.cloudinary.com/imgcave/image/upload/v1592661549/Img/BlogCover/5_2_%E8%A1%A8%E5%8D%95%E6%A0%87%E7%AD%BE_%E9%85%8D%E5%9B%BE_2_j1zdcu.png" alt="5_2_表单标签_配图_2"></p></li></ul><h2 id="textarea标签：多行文本输入"><a href="#textarea标签：多行文本输入" class="headerlink" title="textarea标签：多行文本输入"></a>textarea标签：多行文本输入</h2><ul><li><p><em><code>&lt;textarea&gt;</code></em>标签：用来进行大段的文字输入 </p></li><li><p>用法 </p><pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>行数<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>列数<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文本框文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>rows</code>和<code>cols</code>这两个参数可以分别用CSS中的<code>width</code>和<code>height</code>代替 </p></li><li><p>例子 </p><pre class="line-numbers language-html"><code class="language-html">  <span class="token doctype">&lt;!DOCTYPE HTML></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>文本域<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>save.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>个人简介：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>在此处输入具体内容...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>确定<span class="token punctuation">"</span></span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>重置<span class="token punctuation">"</span></span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://res.cloudinary.com/imgcave/image/upload/v1592661745/Img/BlogCover/5_3_textarea%E6%A0%87%E7%AD%BE_%E9%85%8D%E5%9B%BE_1_jqrlx9.png" alt="5_3_textarea标签_配图_1"></p></li></ul><h2 id="radio-checkbox单选框与复选框"><a href="#radio-checkbox单选框与复选框" class="headerlink" title="radio/checkbox单选框与复选框"></a>radio/checkbox单选框与复选框</h2><ul><li><p><em>radio</em>和<em>checkbox</em>用来进行单选和复选。单选框只能选一项，复选框可以多选或全选 </p></li><li><p>用法 </p><pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>选择框类型<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>默认内容<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>名称<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><em><code>checked</code></em>参数为<code>checked</code>时，该选项默认处于被选中状态 </p></li><li><p>同一组的单选按钮，name取值要一致，以便起到同一组单选按钮进行单选的作用 </p></li><li><p>例子 </p><pre class="line-numbers language-html"><code class="language-html">  <span class="token doctype">&lt;!DOCTYPE HTML></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>单选框、复选框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>save.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>性别:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://res.cloudinary.com/imgcave/image/upload/v1592661777/Img/BlogCover/5_4_%E5%8D%95%E9%80%89%E6%A1%86%E4%B8%8E%E5%A4%8D%E9%80%89%E6%A1%86_%E9%85%8D%E5%9B%BE_1_lbiicj.png" alt="5_4_单选框与复选框_配图_1"></p></li></ul><h2 id="select标签：下拉列表框"><a href="#select标签：下拉列表框" class="headerlink" title="select标签：下拉列表框"></a>select标签：下拉列表框</h2><ul><li><p><em><code>&lt;select&gt;</code></em>标签用来作为下拉列表框，可以单选，也可以多选 </p></li><li><p>用法 </p><pre><code>  &lt;form name="列表框名称"&gt;      &lt;label&gt;列表框标题&lt;/label&gt;      &lt;select multiple="是否多选"&gt;          &lt;option value="选项1提交值"&gt;选项1显示值&lt;/option&gt;          &lt;option value="选项2提交值"&gt;选项2显示值&lt;/option&gt;          &lt;option value="选项3提交值"&gt;选项3显示值&lt;/option&gt;          &lt;option value="选项4提交值" selected="默认是否被选择属性"&gt;选项4显示值&lt;/option&gt;      &lt;/select&gt;  &lt;/form&gt;</code></pre></li><li><p><em><code>selected</code></em>参数选择<code>selected</code>时，默认被选中 </p></li><li><p><em><code>multiple</code></em>参数选择<code>multiple</code>时，列表可进行多选，多选方法为按下<code>Ctrl</code>键同时<code>单击</code>需要多选的选项。不需要多选时候，可以直接不进行此参数配置 </p></li><li><p>例子 </p><pre class="line-numbers language-html"><code class="language-html">  <span class="token doctype">&lt;!DOCTYPE HTML></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>下拉列表框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>save.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>爱好:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">multiple</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multiple<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>看书<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>看书<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>旅游<span class="token punctuation">"</span></span> <span class="token attr-name">selected</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>旅游<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>运动<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>运动<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>购物<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>购物<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://res.cloudinary.com/imgcave/image/upload/v1592661806/Img/BlogCover/5_5_%E5%88%97%E8%A1%A8%E6%A1%86_%E9%85%8D%E5%9B%BE_1_axifcq.png" alt="5_5_列表框_配图_1"></p></li></ul><h2 id="提交按钮与重置按钮"><a href="#提交按钮与重置按钮" class="headerlink" title="提交按钮与重置按钮"></a>提交按钮与重置按钮</h2><ul><li><p><code>&lt;input&gt;</code>标签内<code>type</code>参数选择为<code>submit</code>，为提交按钮；若为<code>reset</code>，则为重置按钮 </p></li><li><p>用法：<code>&lt;input type="submit/reset" value="按钮显示文字"&gt;</code> </p></li><li><p>例子 </p><pre class="line-numbers language-html"><code class="language-html">  <span class="token doctype">&lt;!DOCTYPE HTML></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>重置按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>save.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>爱好:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>看书<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>看书<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>旅游<span class="token punctuation">"</span></span> <span class="token attr-name">selected</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>旅游<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>运动<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>运动<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>购物<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>购物<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>确定<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>重置<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://res.cloudinary.com/imgcave/image/upload/v1592661835/Img/BlogCover/5_6_%E6%8F%90%E4%BA%A4%E6%8C%89%E9%92%AE%E4%B8%8E%E9%87%8D%E7%BD%AE%E6%8C%89%E9%92%AE_%E9%85%8D%E5%9B%BE_1_tlofpz.png" alt="5_6_提交按钮与重置按钮_配图_1"></p></li></ul><h2 id="label标签：鼠标选择"><a href="#label标签：鼠标选择" class="headerlink" title="label标签：鼠标选择"></a>label标签：鼠标选择</h2><ul><li><p><em><code>label</code></em>标签不会向使用者呈现任何特殊效果，当在<code>label</code>标签内选中某条选项文本时，浏览器会自动选中和该label标签相关的表单选项上 </p></li><li><p>当启用<code>label</code>参数时候，在列表中，只要点到对应项的文字，就能选中该选项选框。未启用的话，点击选项的文字无效果，必须点击对应的选框才能选中对应选项 </p></li><li><p>用法：<code>&lt;label for="控件id"&gt;</code> </p></li><li><p>例子 </p><pre class="line-numbers language-html"><code class="language-html">  <span class="token doctype">&lt;!DOCTYPE HTML></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>form中的lable标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>你对什么运动感兴趣：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>run<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>慢跑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>run<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mountain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>爬山<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mountain<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basketball<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>篮球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basketball<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://res.cloudinary.com/imgcave/image/upload/v1592662657/Img/BlogCover/5_7_label_%E9%85%8D%E5%9B%BE_1_kfwtre.png" alt="5_7_label_配图_1"></p></li></ul><h1 id="开始学习CSS：为网页添加样式"><a href="#开始学习CSS：为网页添加样式" class="headerlink" title="开始学习CSS：为网页添加样式"></a>开始学习CSS：为网页添加样式</h1><h2 id="认识CSS样式"><a href="#认识CSS样式" class="headerlink" title="认识CSS样式"></a>认识CSS样式</h2><ul><li><em>CSS</em>全称层叠样式表（Cascading Style Sheets），主要用于定义HTML内容的显示样式，如文字大小、颜色、字体加粗等内容 </li><li>使用CSS样式化的好处为可以通过定义某个样式，让不同网页位置的文字有着统一的字体、字号或颜色等 </li><li>用法 <pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector">自定义标签名</span><span class="token punctuation">{</span>      <span class="token property">color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span>      具体样式内容；      <span class="token number">......</span>  <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>自定义标签名</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>自定义标签名</span><span class="token punctuation">></span></span>      ......  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  ......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><ul><li><p>CSS构成简要说明为<code>选择符{声明}</code>，具体为 </p><pre class="line-numbers language-css"><code class="language-css">  <span class="token comment" spellcheck="true">/*注释*/</span>  <span class="token selector">选择符</span><span class="token punctuation">{</span>属性<span class="token punctuation">:</span>值<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><em>注释<em>：用`/</em>注释内容</em>/<code>表示，和html的注释</code><!--注释内容-->`不同 </p></li><li><p><em>选择符</em>：又称为选择器，指明网页中应用样式规则的元素内容 </p></li><li><p><em>声明</em>：属性和值之间用英文冒号<code>:</code>隔开，多条声明之间用英文分号<code>;</code>隔开 </p></li><li><p>最后一条声明可以没有分号，可以将各个声明分行写，便于阅读 </p></li></ul><h1 id="CSS样式基本知识"><a href="#CSS样式基本知识" class="headerlink" title="CSS样式基本知识"></a>CSS样式基本知识</h1><h2 id="CSS样式插入方式"><a href="#CSS样式插入方式" class="headerlink" title="CSS样式插入方式"></a>CSS样式插入方式</h2><ul><li><p>CSS样式代码插入方式：内联式、嵌入式、外部式 </p></li><li><p><em>内联式</em>：将CSS代码直接写在现有HTML标签中 </p><ul><li>例子：<code>&lt;p style="color:red;font-size:12px"&gt;实例文段&lt;/p&gt;</code> </li><li>注意：<ul><li>样式代码应写在元素的开始标签中，<code>style</code>的双引号内 </li><li>有多条CSS样式代码，中间用英文分号<code>;</code>隔开 </li></ul></li></ul></li><li><p><em>嵌入式</em>： 将CSS样式代码写在<code>&lt;style type="text/css"&gt;&lt;/style&gt;</code>标签之间 </p><ul><li><p>例子： </p><pre class="line-numbers language-css"><code class="language-css">  <span class="token selector"><span class="token class">......</span>  &lt;style type="text/css">  span</span><span class="token punctuation">{</span>      <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  &lt;/style>  &lt;/head><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注意： </p><ul><li>嵌入式CSS样式必须写在<code>&lt;style&gt;&lt;/style&gt;</code>标签之间 </li><li>一般情况下嵌入式CSS样式写在<code>&lt;head&gt;&lt;/head&gt;</code>标签内 </li></ul></li></ul></li><li><p><em>外部式</em>：外部式（也称为外联式）就是把CSS代码写在一个单独的外部文件中，这个CSS样式文件扩展名为<code>.css</code>，在<code>&lt;head&gt;</code>标签内使用<code>&lt;link&gt;</code>标签将CSS样式文件链接到HTML文件内 </p><ul><li>例子：<code>&lt;link href="base.css" rel="stylesheet" type="text/css" /&gt;</code> </li><li>注意： <ul><li>CSS样式文件的名称尽量有意义，容易查找 </li><li><code>rel="stylesheet" type="text/css"</code>是固定写法，无需修改 </li><li><code>&lt;link&gt;</code>标签位置一般写在<code>&lt;head&gt;</code>标签内 </li><li>外部的CSS样式文件内容直接写需要的样式内容，如<code>span{color:red;}</code> </li></ul></li></ul></li><li><p>三种方式的优先级（相同权值下） </p><ul><li><code>内联式 &gt; 嵌入式 &gt; 外部式</code> </li><li><code>嵌入式 &gt; 外部式</code>的前提：嵌入式CSS样式在外部式的后面 </li><li>总体概括：就近原则（距离被设置元素内容越近，样式优先级越高） </li></ul></li></ul><h1 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h1><h1 id="选择器、标签选择器"><a href="#选择器、标签选择器" class="headerlink" title="选择器、标签选择器"></a>选择器、标签选择器</h1><ul><li>选择器即CSS样式声明中的<code>{}</code>前的部分，选择器指明了<code>{}</code>中的样式作用的对象 </li><li>标签选择器即HTML代码中的各种标签 </li></ul><h1 id="类选择器、ID选择器"><a href="#类选择器、ID选择器" class="headerlink" title="类选择器、ID选择器"></a>类选择器、ID选择器</h1><ul><li><p>类选择器用法：<code>.类选择器名称{CSS样式代码;}</code> </p><ul><li>1.使用自定义的标签将想要修饰的内容包含进标签，如<code>&lt;自定义标签&gt;要修饰内容&lt;/自定义标签&gt;</code> </li><li>2.使用<code>class="类选择器名称"</code>对标签设置一个类，如<code>&lt;span class="类选择器名称"&gt;&lt;/span&gt;</code> </li><li>3.设置类选择器的CSS样式具体内容，如<code>.类选择器名称{color:red;}</code> </li></ul></li><li><p>ID选择器用法：ID选择器类似于嵌入式CSS样式和类选择器的结合,ID选择器以井号<code>#</code>开头，在整体头部标签内具体样式格式为<code>#ID名称{样式内容}</code>，在下方使用时候将类选择器中的<code>class</code>换为<code>id</code>即<code>&lt;span id="ID名称"&gt;要修饰内容&lt;/span&gt;</code> </p></li><li><p>二者区别：</p><ul><li>二者都可以用于任何元素 </li><li>类选择器在文档中可以使用（引用）多次，ID选择器只能使用（）引用一次 </li><li>类选择器可以同时引用多个样式，如<code>&lt;span class=类选择器名称1 类选择器名称2&gt;</code>；而ID选择器只能引用一个样式 </li></ul></li><li><p>例子 </p><pre class="line-numbers language-html"><code class="language-html">  <span class="token doctype">&lt;!DOCTYPE HTML></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>类选择器与ID选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.stress</span></span><span class="token punctuation">{</span>      <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token id">#setGreen</span></span><span class="token punctuation">{</span>      <span class="token property">color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>setGreen<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>TEST<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stress<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>789<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>ABC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>DEF<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://res.cloudinary.com/imgcave/image/upload/v1592662689/Img/BlogCover/8_2_%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8_%E9%85%8D%E5%9B%BE_1_nbffuw.png" alt="8_2_类选择器_配图_1"></p></li></ul><h2 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h2><ul><li><p><code>&gt;</code>子选择器用于指定标签元素的第一个子元素。如<code>.food&gt;li{border:1px solid red;}</code>会使名为food下的子元素<code>li</code>(水果、蔬菜)加上红色实线边框 </p></li><li><p>简言之，就是类选择器多了对特定标签的样式化，仅对正文中引用区域中，被特定标签包含的文段进行样式化 </p></li><li><p>示例代码 </p><pre class="line-numbers language-html"><code class="language-html">  <span class="token doctype">&lt;!DOCTYPE HTML></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>子选择符<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.food</span>>li</span><span class="token punctuation">{</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*添加边框样式（粗细为1px， 颜色为红色的实线）*/</span>  <span class="token selector"><span class="token class">.first</span>>span</span><span class="token punctuation">{</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid red<span class="token punctuation">;</span><span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>first<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>三年级时，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我还是一个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>胆小如鼠<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>的小女孩<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>，上课从来不敢回答老师提出的问题，生怕回答错了老师会批评我。就一直没有这个勇气来回答老师提出的问题。学校举办的活动我也没勇气参加。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>食物<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>food<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>水果          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>香蕉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>苹果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>梨<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>蔬菜          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>白菜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>油菜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>卷心菜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://res.cloudinary.com/imgcave/image/upload/v1592662724/Img/BlogCover/8_3_%E5%AD%90%E9%80%89%E6%8B%A9%E5%99%A8_%E9%85%8D%E5%9B%BE_1_sncbzg.png" alt="8_3_子选择器_配图_1"></p></li></ul><h2 id="包含（后代）选择器"><a href="#包含（后代）选择器" class="headerlink" title="包含（后代）选择器"></a>包含（后代）选择器</h2><ul><li><p>包含选择器是对于子选择器的进一步加强作用。子选择器对于指定标签的第一子层级起作用，而包含选择器对于无论是第几层，只要是子层级就会被起作用 </p></li><li><p>用法：<code>.first span{color:red}</code> </p></li><li><p>注意 </p><ul><li>子选择器仅指它的直接后代（可理解为子元素的第一代后代）；后代选择器时作用于所有子后代元素 </li><li>后代选择器通过<code>空格</code>来进行选择；子选择器通过<code>&gt;</code>进行选择 </li></ul></li><li><p>例子(子选择器) </p><pre class="line-numbers language-html"><code class="language-html">  <span class="token doctype">&lt;!DOCTYPE HTML></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>后代选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.first</span> span</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.food</span>>li</span><span class="token punctuation">{</span>      <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid red<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>first<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>789<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>food<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>ABC          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>DEF<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>GHI<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>JKL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>MNO          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>PQR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>STU<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>VWX<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://res.cloudinary.com/imgcave/image/upload/v1592662751/Img/BlogCover/8_4_%E5%8C%85%E5%90%AB%E9%80%89%E6%8B%A9%E5%99%A8_%E9%85%8D%E5%9B%BE_1_hdl2bx.png" alt="8_4_包含选择器_配图_1.png"></p></li><li><p>例子（包含选择器） </p><pre class="line-numbers language-html"><code class="language-html">  <span class="token doctype">&lt;!DOCTYPE HTML></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>后代选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.first</span> span</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.food</span> li</span><span class="token punctuation">{</span>      <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid red<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>first<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>789<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>food<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>ABC          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>DEF<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>GHI<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>JKL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>MNO          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>PQR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>STU<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>VWX<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://res.cloudinary.com/imgcave/image/upload/v1592662783/Img/BlogCover/8_4_%E5%8C%85%E5%90%AB%E9%80%89%E6%8B%A9%E5%99%A8_%E9%85%8D%E5%9B%BE_2_wrozjg.png" alt="8_4_包含选择器_配图_2"></p></li></ul><h2 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h2><ul><li><code>*</code>作用为用来匹配HTML中所有标签元素，即所有的标签元素都会默认应用<code>* ｛｝</code>中的样式，只需要在<code>style</code>标签中正常声明就行，在具体内容中无须引用 </li><li>用法：<code>* {color:red}</code> </li></ul><h2 id="伪类选择符"><a href="#伪类选择符" class="headerlink" title="伪类选择符"></a>伪类选择符</h2><ul><li><p>伪类选择符是用来给标签的某种状态设置（如鼠标滑过）样式，伪类选择符中在<code>a</code>标签上使用的<code>:hover</code>兼容性较好，即<code>a:hover{具体样式}......&lt;a:hover&gt;&lt;/a&gt;</code> </p></li><li><p>例子 </p><pre class="line-numbers language-html"><code class="language-html">  <span class="token doctype">&lt;!DOCTYPE HTML></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>伪类选择符<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector">a<span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span>      <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>      <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>TEST<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https:www.ezhq.xyz<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>aurdes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>789<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://res.cloudinary.com/imgcave/image/upload/v1592662808/Img/BlogCover/8_6_%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E7%AC%A6_%E9%85%8D%E5%9B%BE_1_wehpiy.png" alt="8_6_伪类选择符_配图_1"></p></li></ul><h2 id="分组选择符"><a href="#分组选择符" class="headerlink" title="分组选择符"></a>分组选择符</h2><ul><li><p>分组选择符为HTML多个标签设置同一个样式 </p></li><li><p>用法：<code>h1,span{具体样式}</code>，在内容中<code>h1``span</code>两个标签的样式会一样 </p></li><li><p>例子 </p><pre class="line-numbers language-html"><code class="language-html">  <span class="token doctype">&lt;!DOCTYPE HTML></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>分组选择符<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.first</span>,span</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector"><span class="token id">#second</span></span><span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">20</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>TEST<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>first<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>789<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>second<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ABC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>DEF<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>GHI<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://res.cloudinary.com/imgcave/image/upload/v1592664279/Img/BlogCover/8_7_%E5%88%86%E7%BB%84%E9%80%89%E6%8B%A9%E7%AC%A6_%E9%85%8D%E5%9B%BE_1_eozee6.png" alt="8_7_分组选择符_配图_1"></p></li></ul><h1 id="CSS的继承、层叠和特殊性"><a href="#CSS的继承、层叠和特殊性" class="headerlink" title="CSS的继承、层叠和特殊性"></a>CSS的继承、层叠和特殊性</h1><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li><p><strong>继承</strong>是指样式应用于某个特定标签后，此标签内的其他标签也会被应用此样式，即更次一级的子标签会被套用父层标签的样式 </p></li><li><p>例子1：下面代码会使<code>&lt;p&gt;</code>标签和<code>&lt;span&gt;</code>标签的内容都设置为红色 </p><pre class="line-numbers language-html"><code class="language-html">  p{color:red;}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>ABC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>DEF<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>GHI<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>例子2：下面代码回事<code>&lt;p&gt;</code>标签加上红色1像素实心的边框，但<code>&lt;p&gt;</code>标签的子标签<code>&lt;span&gt;</code>并没有被应用此样式 </p><pre class="line-numbers language-html"><code class="language-html">  p{border:1px solid red;}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>ABC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>DEF<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>GHI<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>有一些CSS样式不具有继承性，如：<code>border:1px solid red;</code> </p></li><li><p>例子3： </p><pre class="line-numbers language-html"><code class="language-html">  <span class="token doctype">&lt;!DOCTYPE HTML></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>继承<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector">p</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid red<span class="token punctuation">;</span><span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>ezhq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>first<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ABC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>DEF<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>GHI<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>second<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>JKL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>MNO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>PQR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://res.cloudinary.com/imgcave/image/upload/v1592664308/Img/BlogCover/9_1_%E7%BB%A7%E6%89%BF_%E9%85%8D%E5%9B%BE_1_hh1zus.png" alt="9_1_继承_配图_1"></p></li></ul><h2 id="特殊性-权值"><a href="#特殊性-权值" class="headerlink" title="特殊性/权值"></a>特殊性/权值</h2><ul><li><p>当为同一个标签设定多种样式时候，元素启用哪一个样式，取决于样式的<strong>权值</strong> </p></li><li><p>权值规则：</p><ul><li>标签权值为1，类选择符为10，ID选择符最高为100，继承的权值极低，可以近似为0 </li><li><code>p{color:red;}</code>权值：1 </li><li><code>p span{color:red;}</code>权值：1+1=2 </li><li><code>.warning{color:red;}</code>权值：10 </li><li><code>p span.warning{color:red}</code>权值：1+1+10=12 </li><li><code>#footer .note p{color:red;}</code>权值：100+10+1=111 </li></ul></li><li><p>例子 </p><pre class="line-numbers language-html"><code class="language-html">  <span class="token doctype">&lt;!DOCTYPE HTML></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>特殊性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector">p</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.first</span></span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*因为权值高显示为绿色*/</span>  <span class="token selector">span</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>pink<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*设置为粉色*/</span>  <span class="token selector">p span</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>purple<span class="token punctuation">;</span><span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>ABC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>first<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>DEF<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>GHI<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>JKL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>second<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>MNO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://res.cloudinary.com/imgcave/image/upload/v1592664338/Img/BlogCover/9_2_%E7%89%B9%E6%AE%8A%E6%80%A7_%E9%85%8D%E5%9B%BE_1_enkacc.png" alt="9_2_特殊性_配图_1"></p></li></ul><h2 id="层叠"><a href="#层叠" class="headerlink" title="层叠"></a>层叠</h2><ul><li><p>当权值相同的多个样式作用于同一个标签，会涉及到<strong>层叠</strong>的问题 </p></li><li><p>在HTML文件中对于同一个元素有多个CSS样式存在，当相同权重的样式存在时，根据这些CSS样式的前后顺序决定，处于最后面的CSS样式会被应用 </p></li><li><p>CSS样式优先级：内联样式表（标签内部） &gt; 嵌入样式表（）当前文件中 &gt; 外部样式表（外部文件中） </p></li><li><p>例子 </p><pre class="line-numbers language-html"><code class="language-html">  <span class="token doctype">&lt;!DOCTYPE HTML></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>层叠<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector">p</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">p</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">p</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>pink<span class="token punctuation">;</span><span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>ABC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>first<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>DEF<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>GHI<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>JKL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>second<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>MNO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>PQR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>STU<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://res.cloudinary.com/imgcave/image/upload/v1592664481/Img/BlogCover/9_3_%E7%89%B9%E6%AE%8A%E6%80%A7_%E9%85%8D%E5%9B%BE_1_j249pa.png" alt="9_3_特殊性_配图_1"></p></li></ul><h2 id="重要性"><a href="#重要性" class="headerlink" title="重要性"></a>重要性</h2><ul><li><p><code>!important</code>用于在特殊情况下需要为某些样式设定最高权值 </p></li><li><p>例子 </p><pre class="line-numbers language-html"><code class="language-html">  <span class="token doctype">&lt;!DOCTYPE HTML></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>!important<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector">p</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>red!important<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">p<span class="token class">.first</span></span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span><span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>ezhq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>first<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ABC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>DEF<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>GHI<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>second<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>JKL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>first<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>MNO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>PQR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://res.cloudinary.com/imgcave/image/upload/v1592664509/Img/BlogCover/9_4_%E9%87%8D%E8%A6%81%E6%80%A7_%E9%85%8D%E5%9B%BE_1_ysxoi9.png" alt="9_4_重要性_配图_1"></p></li><li><p>注意：</p><ul><li><code>!important</code>要放在分号<code>;</code>的前面 </li><li>当网页制作者不设置CSS样式时候，浏览器会按照自己的默认方式显示网页，并且访问者也可以自定义网页显示效果（如缩放字号等）。整个样式显示优先级为：浏览器默认样式 &lt; 网页制作者定义的样式 &lt; 访问者设置的浏览器显示样式 </li></ul></li></ul><h1 id="CSS格式化排版"><a href="#CSS格式化排版" class="headerlink" title="CSS格式化排版"></a>CSS格式化排版</h1><h1 id="CSS盒模型"><a href="#CSS盒模型" class="headerlink" title="CSS盒模型"></a>CSS盒模型</h1><h1 id="CSS布局模型"><a href="#CSS布局模型" class="headerlink" title="CSS布局模型"></a>CSS布局模型</h1><h1 id="CSS代码缩写：占用更少的带宽"><a href="#CSS代码缩写：占用更少的带宽" class="headerlink" title="CSS代码缩写：占用更少的带宽"></a>CSS代码缩写：占用更少的带宽</h1><h1 id="单位和值"><a href="#单位和值" class="headerlink" title="单位和值"></a>单位和值</h1><h1 id="CSS样式设置小技巧"><a href="#CSS样式设置小技巧" class="headerlink" title="CSS样式设置小技巧"></a>CSS样式设置小技巧</h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Frontend </tag>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMD获取历史WiFi名称和密码</title>
      <link href="cn/2017081006/"/>
      <url>cn/2017081006/</url>
      
        <content type="html"><![CDATA[<ol><li>按下组合键 <code>Win + R</code>   </li><li>在打开的窗口中输入 <code>cmd</code> 并回车  </li><li>将下列代码复制粘贴到打开的黑色背景的窗口中并回车即可  <pre class="line-numbers language-shell"><code class="language-shell"> for /f "skip=9 tokens=1,2 delims=:" %i in ('netsh wlan show profiles') do  @echo %j | findstr -i -v echo | netsh wlan show profiles %j key=clear<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Terminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向零基础新手的C#基础知识</title>
      <link href="cn/2017071812/"/>
      <url>cn/2017071812/</url>
      
        <content type="html"><![CDATA[<blockquote><p>备注：此课程为C#入门课程，作为UWP开发入门课程的先修基础课程。 </p></blockquote><h2 id="第一讲-课程介绍"><a href="#第一讲-课程介绍" class="headerlink" title="第一讲 课程介绍"></a>第一讲 课程介绍</h2><h3 id="内容简介"><a href="#内容简介" class="headerlink" title="内容简介"></a>内容简介</h3><ul><li><p>主题简介，了解课程预期效果，相关软件下载等准备工作。  </p></li><li><p><strong>VisualStudio 2017下载地址</strong> ：<a href="https://www.visualstudio.com/zh-hans/thank-you-downloading-visual-studio/?sku=Community&amp;rel=15" target="_blank">https://www.visualstudio.com/zh-hans/thank-you-downloading-visual-studio/?sku=Community&amp;rel=15</a>  </p></li><li><p>对于VisualStudio 2017安装过程中Windows 10 SDK 安装失败的情况，可以直接下载单独的SDK文件单独安装（安装时候需要退出VisualStudio 2017）。SDK百度云：链接: <a href="http://pan.baidu.com/s/1o8x8hXS" target="_blank" rel="noopener">http://pan.baidu.com/s/1o8x8hXS</a> 密码: vycy  </p></li></ul><h2 id="第二讲-创建你的第一个C-程序"><a href="#第二讲-创建你的第一个C-程序" class="headerlink" title="第二讲 创建你的第一个C#程序"></a>第二讲 创建你的第一个C#程序</h2><h3 id="内容简介-1"><a href="#内容简介-1" class="headerlink" title="内容简介"></a>内容简介</h3><ul><li>学习如何创建一个简单的应用程序，并获取针对您在开始编写和编译代码时可能会遇到的不同问题的常用解决方案的说明。  </li></ul><h3 id="简记"><a href="#简记" class="headerlink" title="简记"></a>简记</h3><ul><li>编程中各种括号区分()、{}、[]、&lt;&gt;  </li><li>编程易错点：大小写、中英文符号使用错误、符号使用没有配对、没有以分号结尾……  </li><li>要思考的点：1.为什么那样做、做了什么、表象之下发生了什么。2.编程语法规则。  </li></ul><h2 id="第三讲-了解你的第一个-C-程序"><a href="#第三讲-了解你的第一个-C-程序" class="headerlink" title="第三讲 了解你的第一个 C# 程序"></a>第三讲 了解你的第一个 C# 程序</h2><h3 id="内容简介-2"><a href="#内容简介-2" class="headerlink" title="内容简介"></a>内容简介</h3><ul><li>为了从较高层面更好地了解 C# 语法，请返回到我们刚刚创建的程序，以便拆分每个关键字和符号。  </li></ul><h3 id="简记-1"><a href="#简记-1" class="headerlink" title="简记"></a>简记</h3><h2 id="第四讲-使用代码文件、项目和解决方案"><a href="#第四讲-使用代码文件、项目和解决方案" class="headerlink" title="第四讲 使用代码文件、项目和解决方案"></a>第四讲 使用代码文件、项目和解决方案</h2><h3 id="内容简介-3"><a href="#内容简介-3" class="headerlink" title="内容简介"></a>内容简介</h3><p>了解如何打开和关闭项目中的各个文件、项目和解决方案之间的关系，等等。  </p><h3 id="简记-2"><a href="#简记-2" class="headerlink" title="简记"></a>简记</h3><ul><li>Solution Explore 解决方案资源管理器  </li><li>当前项目位置:文档（Documents）\Visual Studio（当前使用的版本）\Projects\  </li><li>bin 文件夹为 binary 缩写，表示是二进制执行文件存储文件夹  </li><li>Debug 文件夹调试应用程序时创建的文件夹，程序创建了一个临时版本的应用程序来进行调试  </li></ul><h3 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h3><ul><li><strong>方法:</strong> 一个命名的代码块，你可以通过调用其名称来调用/执行它  </li><li>源代码的编译结果称为：<strong>.NET 程序集</strong>  </li><li>.NET Framework 运行时（CLR）的用途为：它是你的程序在……内运行的内容，可保护用户免受恶意代码的侵害，并处理内存管理和其他运行时任务  </li></ul><h2 id="第五讲-了解数据类型和变量"><a href="#第五讲-了解数据类型和变量" class="headerlink" title="第五讲 了解数据类型和变量"></a>第五讲 了解数据类型和变量</h2><h3 id="内容简介-4"><a href="#内容简介-4" class="headerlink" title="内容简介"></a>内容简介</h3><ul><li>通过浏览基本构造块，向您的词汇表添加 C# 语法︰数据类型和变量。此外，还了解基本主题（例如命名约定和数据类型转换）。  </li></ul><h3 id="简记-3"><a href="#简记-3" class="headerlink" title="简记"></a>简记</h3><ul><li>variable 变量  </li><li><strong>Console.WriteLine()和Console.Write()区别：</strong>Console.WriteLine()和Console.Write()都是System.Console提供的方法，都是用来输出的。Console.WriteLine()是把要输出的字符串与换行符一起输出，会输出完毕后将光标移到下一行，而Console.Write()不会换行。  </li><li><strong>Ctrl + .</strong>  更改某个变量后，可以通过此快捷键批量更改同名变量  </li><li>驼峰式命名法：第一个单词小写，后续单词的首字母大写  </li><li><strong>让变量名更具描述性与辨识性</strong>： 不能对同一个变量定义两次、不要重复使用变量名称（只改改大小写）、遵循命名约定。  </li><li>合理使用intellisense(智能提示)  </li></ul><h2 id="第六讲-if判定语句"><a href="#第六讲-if判定语句" class="headerlink" title="第六讲 if判定语句"></a>第六讲 if判定语句</h2><h3 id="内容简介-5"><a href="#内容简介-5" class="headerlink" title="内容简介"></a>内容简介</h3><ul><li>获得 if 判定语句以及条件运算符的简介。找出如何重构代码以使其更紧凑且不太可能会产生错误。  </li></ul><h3 id="简记-4"><a href="#简记-4" class="headerlink" title="简记"></a>简记</h3><ul><li><strong>范围、在特定范围内部声明变量</strong>：本质上说，在一个内部范围内（如一个if语句内部）定义一个变量时，该变量在这个范围之外不可用。换言之，如果我们在一个代码块内部，或一个花括号内部，定义一个变量，则它只在这对花括号内有用，在这对花括号以外不可用。  </li><li>替换代码 {0}  </li></ul><h3 id="课堂代码"><a href="#课堂代码" class="headerlink" title="课堂代码"></a>课堂代码</h3><pre class="line-numbers language-cs"><code class="language-cs">using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Decisions{    class Program    {        static void Main(string[] args)        {            /*            Console.WriteLine("Bob's Big Giveaway");            Console.Write("Choose a door: 1, 2 or 3: ");            string uservalue = Console.ReadLine();            string message = "";            if (uservalue == "1")            {                message = "You won a new car!";            }            else if(uservalue == "2")            {                message = "You won a new boat!";            }            else if(uservalue == "3")            {                message = "You won a new cat!";            }            else            {                message = "Sorry , we can't understand.";                message += " Sorry, you lose.";            }            Console.WriteLine(message);            Console.ReadLine();            */            Console.WriteLine("Bob's Big Giveaway");            Console.Write("Choose a door: 1, 2 or 3: ");            string uservalue = Console.ReadLine();            string message = (uservalue == "1") ? "boat" : "strand of lint";            //Console.Write("You won a ");            //Console.Write(message);            //Console.Write(".");            //Console.WriteLine("You won a {0} .", message);            Console.WriteLine("You entered: {0}, therefore you won a {1}.", uservalue, message);            Console.ReadLine();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第七讲-运算符、表达式和语句"><a href="#第七讲-运算符、表达式和语句" class="headerlink" title="第七讲 运算符、表达式和语句"></a>第七讲 运算符、表达式和语句</h2><h3 id="内容简介-6"><a href="#内容简介-6" class="headerlink" title="内容简介"></a>内容简介</h3><ul><li>了解如何创建格式正确的 C# 语句(由包含运算符和操作数的表达式组成)。了解在忽略 C# 的语法规则时出现的编译错误。  </li></ul><h3 id="简记-5"><a href="#简记-5" class="headerlink" title="简记"></a>简记</h3><ul><li>操作数、运算符、表达式  </li><li>对象、类、变量</li><li><strong>运算符：</strong> +加、-减、*乘、/除  </li><li><strong>逻辑运算符：</strong> and 与、|| 或  </li><li>Console是一个“类”，而“类”是“容器”，缺少对方法的一个更强大的定义。访问一个类或一个对象的成员方法的方式就是使用英文的 . 符号，此为成员访问运算符。  </li><li>方法调用运算符，如通过()符号调用一个名为 WriteLine 的方法  </li></ul><h3 id="评估-1"><a href="#评估-1" class="headerlink" title="评估"></a>评估</h3><ul><li>表达式由哪几项组成: 操作数和运算符  </li><li>语句由哪项组成：表达式  </li></ul><h2 id="第八讲-for迭代语句"><a href="#第八讲-for迭代语句" class="headerlink" title="第八讲 for迭代语句"></a>第八讲 for迭代语句</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>了解几种不同类型的迭代语句，如何利用“代码段”帮助提示您此复杂语句的语法，并进行调试。  </li></ul><h3 id="简记-6"><a href="#简记-6" class="headerlink" title="简记"></a>简记</h3><ul><li>for 迭代语句</li><li>F9 设置断点调试  </li><li>单步执行程序  </li><li>条件中断调试  </li><li>出现代码补全提示后 Tab * 2 进行自动代码模板填充，填充并进行条件更改后直接回车可以自动到达代码块编写处。  </li></ul><h2 id="第九讲-理解数组"><a href="#第九讲-理解数组" class="headerlink" title="第九讲 理解数组"></a>第九讲 理解数组</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><ul><li>了解数组并了解如何声明和使用数组。观看几个强大的内置方法(可为数组提供额外的功能)的演示。  </li></ul><h3 id="简记-7"><a href="#简记-7" class="headerlink" title="简记"></a>简记</h3><ul><li>数组  </li></ul><h3 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h3><pre class="line-numbers language-cs"><code class="language-cs">using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace UnderstandingArrays{    class Program    {        static void Main(string[] args)        {            /*            int number1 = 4;            int number2 = 8;            int number3 = 15;            int number4 = 16;            int number5 = 23;            if (number1 = 16)            {            }            else if (number2 == 16)            {            }            else if (number3 == 16)            {            }            */            /*            int[] numbers = new int[5];            numbers[0] = 4;            numbers[1] = 8;            numbers[2] = 15;            numbers[3] = 16;            numbers[4] = 23;            //numbers[5] = 42;            //Console.WriteLine(numbers[1]);            Console.WriteLine(numbers.Length);            Console.ReadLine();            */            //int[] numbers = new int[] { 4, 8, 15, 16, 23, 42 };            string[] names = new string[] { "Eddie", "Alex", "Michael" };            /*for (int i = 0; i < names.Length; i++)            {                Console.WriteLine(names[i]);            }            Console.ReadLine();            */            /*            foreach (string name in names)            {                Console.WriteLine(name);            }            Console.ReadLine();            */            //利用数组实现字符串倒置            string zig = "You can't get what you want out of life " +                 " if you help enough other people get what they want.";     //创建字符串zig            char[] charArray = zig.ToCharArray();       //将字符串zig中的字符复制到字符数组charArrray            Array.Reverse(charArray);       //反转整个charArray中的项目顺序            foreach (char zigChar in charArray)     //循环访问数组charArray            {                Console.Write(zigChar);            }            Console.ReadLine();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="评估-2"><a href="#评估-2" class="headerlink" title="评估"></a>评估</h3><ul><li>正确声明并初始化数组：<code>int[] numbers = {1, 2, 3, 4};</code>  </li><li>当尝试访问数组中位于数组范围外部的项目时，会遇到的异常：IndexOutOfRangeException  </li></ul><h2 id="第十讲-定义和调用方法"><a href="#第十讲-定义和调用方法" class="headerlink" title="第十讲 定义和调用方法"></a>第十讲 定义和调用方法</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><ul><li>创建一个帮助器<strong>方法</strong>，创建和调用方法来检索值，创建和使用输入参数，了解字符串格式设置，并创建重载方法。  </li></ul><h3 id="简记-8"><a href="#简记-8" class="headerlink" title="简记"></a>简记</h3><ul><li><strong>方法：</strong>由花括号定义的代码块  </li><li>对于多次复制粘贴的代码块，要仔细检查，保持警惕  </li><li>本讲需要仔细体会，尤其是重载方法  </li></ul><h3 id="课堂代码-1"><a href="#课堂代码-1" class="headerlink" title="课堂代码"></a>课堂代码</h3><pre class="line-numbers language-cs"><code class="language-cs">using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace HelperMethods{    class Program    {        static void Main(string[] args)        {            Console.WriteLine("The Name Game");            Console.Write("What's your first name? ");            string firstName = Console.ReadLine();            Console.Write("What's your last name? ");            string lastName = Console.ReadLine();            Console.Write("In what city were you born?");            string city = Console.ReadLine();            DisplayResult(ReverseString(firstName),                ReverseString(lastName),                ReverseString(city));            Console.ReadLine();        }        private static string ReverseString(string message)        {            char[] messageArray = message.ToCharArray();            Array.Reverse(messageArray);            return String.Concat(messageArray);        }        private static void DisplayResult(            string reversedFirstName,            string reversedLastName,            string reversedCity)        {            Console.Write("Results: ");            Console.Write(string.Format("{0} {1} {2}",                reversedFirstName,                reversedLastName,                reversedCity));        }        private static void DisplayResult(string message)        {            Console.Write("Results: ");            Console.Write(message);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="评估-3"><a href="#评估-3" class="headerlink" title="评估"></a>评估</h3><ul><li>应该在何时创建方法：当你需要可能多次重复使用相同的代码时  </li><li>要创建重载方法，要执行的操作：创建两个或以上具有相同名称，但输入参数数目不同和/或数据类型不同的方法  </li></ul><h2 id="第十一讲-While迭代语句"><a href="#第十一讲-While迭代语句" class="headerlink" title="第十一讲 While迭代语句"></a>第十一讲 While迭代语句</h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><ul><li>学习一个新的迭代语句，您可以使用该语句继续执行一个代码块，直到某个条件不再为 true。  </li></ul><h3 id="简记-9"><a href="#简记-9" class="headerlink" title="简记"></a>简记</h3><ul><li>前期已学迭代语句回顾：<br><strong>for 循环：</strong>能够遍历代码块，预设次数根据计数器来定<br><strong>foreach 迭代语句：</strong>能够以一个数组中每一项一次的频率来遍历一个代码块<br>在上面两种迭代语句中，都需要知道有多少次迭代或者要遍历多少次指定的代码块。但是如果事先不知道迭代多少次，或许需要一直迭代，知道满足某个条件为止，可以使用while、do-while  </li><li>do-while 跳出迭代语句之前至少能迭代一次  </li><li>本讲主要内容：while、do-while  </li><li>while 用处例子：为控制台窗口应用程序创建某类菜单系统  </li><li><strong>int.Parse()</strong> 强制类型转换  </li><li><strong>Console.Clear()</strong> 清屏  </li><li><strong>Random.Next 方法 (Int32, Int32)</strong> 返回在指定范围内的任意整数  </li><li>while将评估最开始的第一次，但需求实际上可能从不运行。do-while将先执行一次，然后评估条件while()  </li></ul><h3 id="课堂代码-2"><a href="#课堂代码-2" class="headerlink" title="课堂代码"></a>课堂代码</h3><p><strong>带菜单的打印数字和猜数字游戏</strong>  </p><pre class="line-numbers language-cs"><code class="language-cs">using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Whileteration{    class Program    {        static void Main(string[] args)        {            bool displayMenu = true;            while (displayMenu)            {                displayMenu = MainMenu();            }        }        private static bool MainMenu()        {            Console.Clear();            Console.WriteLine("Choose an option:");            Console.WriteLine("1) Print Numbers");            Console.WriteLine("2) Guessing Game");            Console.WriteLine("3) Exit");            string result = Console.ReadLine();            if (result == "1")            {                PrintNumbers();                return true;            }            else if (result == "2")            {                GuessingGame();                return true;            }            else if (result == "3")            {                return false;            }            else            {                return true;            }        }        private static void PrintNumbers()        {            Console.Clear();            Console.WriteLine("Print Numbers!");            Console.Write("Type a number: ");            int result = int.Parse(Console.ReadLine()); //将读到的字符串转换为int            int counter = 1;            while (counter <= result)            {                Console.Write(counter);                Console.Write("-");                counter++;            }            Console.ReadLine();        }        private static void GuessingGame()        {            Console.Clear();            Console.WriteLine("Guessing game!");            Random myRandom = new Random();     //产生随机数            int randowmNumber = myRandom.Next(1, 11);   //生成1-11的随机数            int guess = 0;            bool incorrect = true;            do            {                Console.WriteLine("Guess a number between 1 and 10: ");                string result = Console.ReadLine();                guess++;                if (result == randowmNumber.ToString())                {                    incorrect = false;                }                else                {                    Console.WriteLine("Wrong!");                }            } while (incorrect);            Console.WriteLine("Correct! It took you {0} guesses.",guess);            Console.ReadLine();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="评估-4"><a href="#评估-4" class="headerlink" title="评估"></a>评估</h3><ul><li>如果需要.NET 生成一个随机数，可以用：Random类  </li><li>为什么选择do-while语句：因为需要执行代码块至少一次  </li><li>为什么应该使用while 迭代语句而非for 迭代语句：因为需要继续循环访问代码块，直到给定条件不再为true  </li></ul><h2 id="第十二讲-处理字符串"><a href="#第十二讲-处理字符串" class="headerlink" title="第十二讲 处理字符串"></a>第十二讲 处理字符串</h2><h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><ul><li>了解如何使用内置的 String 方法操作文字字符串内部的内容，并了解如何使用 StringBuilder 类以内存和资源友好的方式将很多字符串串联在一起。  </li></ul><h3 id="简记-10"><a href="#简记-10" class="headerlink" title="简记"></a>简记</h3><ul><li><strong>主要内容：</strong>  <ol><li>如何使用反斜杠字符进行转义、插入  </li><li>文字字符串中的转义字符、特殊字符  </li><li>如何使用 String.Format  </li><li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/base-types/standard-numeric-format-strings" target="_blank" rel="noopener">标准数字格式字符串（英语）</a><br> <a href="https://msdn.microsoft.com/zh-cn/library/241ad66z(v=vs.80).aspx" target="_blank" rel="noopener">标准数字格式字符串（中文）</a>  </li></ol></li></ul><ul><li><p>反斜杠字符“\”特殊性：可以用来转义或者将转义序列插入到文字字符串中，也可以用来将一些特殊字符放入某些换行符中，把东西放入文字字符串中。  </p></li><li><p>真实需要把 \ 当做字符方法：  </p><ol><li>使用双重反斜杠: <code>\\</code>  </li><li>在字符串双引号前使用@声明：<code>@“Test\”</code>  </li></ol></li><li><p>要是数据显示为数据格式，可以在引用后面跟上冒号和格式符号C：<code>string mySting = string.Format("{0:C}", 123.45);</code>  </p></li><li><p>显示为数字格式：<code>string myString = string.Format("{0:N}", 123456789)</code>  </p></li><li><p>百分号格式：<code>string myString = String.Format("Percentage:{0:P}", .123);</code>  </p></li><li><p>创建自定义格式（格式化自定义电话号码）</p><pre class="line-numbers language-cs"><code class="language-cs">string myString = string.Format("Phone Number:{0:(###) ###-####}",1234567890);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>当使用自定义 <code>#</code> 符号来为数字值创建一个自定义格式时候，格式化会从右向左进行。若实际数字多于格式中表示的数字，多余的数字会被推向最左侧的格式。  </p></li><li><p><strong>String.Substring(Int32)</strong> 从String中检索，返回忽略前Int32个字符后的字符  </p></li><li><p><strong>String.Substring(Int32,Int32)</strong> 从String中检索，忽略前Int32个字符，取出接下来的Int32个字符并丢弃多于的字符  </p></li><li><p><strong>String.ToUpper()</strong> 强制大写转换String  </p></li><li><p><strong>String.Replace(“a”, “b”)</strong> 搜索String中的a并替换为b  </p></li><li><p><strong>String.Remove(5, 12)</strong> 删除String字符串中5-12字符  </p></li><li><p><strong>String.Trim()</strong> 从当前 String 对象移除所有前导空白字符和尾部空白字符  </p></li><li><p><strong>StringBuilder</strong> 创建可变字符字符串  </p></li></ul><h3 id="课堂代码-3"><a href="#课堂代码-3" class="headerlink" title="课堂代码"></a>课堂代码</h3><pre class="line-numbers language-cs"><code class="language-cs">using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace WorkingWithString{    class Program    {        static void Main(string[] args)        {            //string myString = "My \"so-called\" life";            //string myString = "What if I need a \nNew line?";            //string myString = "Go to your c:\ drive";            //string myString = @"Go to your c:\ drive";            //string myString = String.Format("{0} = {1}","First", "Second");            //string myString = String.Format("{0} = {0}", "First", "Second");            //string myString = String.Format("{1} = {0}", "First", "Second");            //string myString = String.Format("{0:C}", 123.45);             //显示货币格式            //string myString = String.Format("{0:N}", 123456789);          //显示数字格式            //string myString = String.Format("Percentage:{0:P}", .123);    //显示百分比格式            //string myString = string.Format("Phone Number:{0:(###) ###-####}",1234567890); //显示自定义电话格式            //string myString = " That summer we took threes across the board  ";            //myString = myString.Substring(6,14);      //抛弃前6个字符，只取后续14个字符            //myString = myString.ToUpper();            //强制大写转换            //myString = myString.Replace(" ", "--");   //搜索替换            //myString = myString.Remove(6, 14);        //删除字符            /*            myString = String.Format("Length before:{0} -- Length after:{1}",                myString.Length,                myString.Trim().Length);            */            /*            string myString = "";            for (int i = 0; i < 100; i++)            {                myString += "--" + i.ToString();            }            */            StringBuilder myString = new StringBuilder();            for (int i = 0; i < 100; i++)            {                myString.Append("--");                myString.Append(i);            }            Console.WriteLine(myString);            Console.ReadLine();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="评估-5"><a href="#评估-5" class="headerlink" title="评估"></a>评估</h3><ol><li><p><strong>StringBuilder 类有什么用途：</strong>提供一种更友好的内存方式来处理字符串  </p></li><li><p><strong>那个字符用于对C#字符串中的绝大多数特殊字符进行转义：</strong>反斜杠  </p></li><li><p><strong>下列哪一项不是字符串数据类型的可用方法</strong>D  </p><ul><li>A. Trim()  </li><li>B. Replace()  </li><li>C. Append()  </li><li>D. ToUpper()  </li></ul></li><li><p><strong>我想设置这些数字的格式：1234.56 ,使其如 1,234.56 所示，下面那个表达式可以实现这一点</strong>A  </p><pre><code> * A. string.Format("{0:C}", 1234.56)   * B. string.Format("{0:#,###.##}", 1234.56)   * C. string.Format("{0:G}", 1234.56)   * D. string.Format("{0:P}", 1234.56)  </code></pre></li><li><p><strong>以下代码行的什么问题会导致它无法编译string myString = string.Format(“{2} - {3}”, “3”, “4”, “5”);</strong>D  </p><ul><li>A. 有未使用的额外字符串值  </li><li>B. 大括号中的替换代码是从零开始的，因此”{3}”将在范围之外  </li><li>C. 替换代码应该使用方括号，而不是花括号  </li><li>D. 替换代码将不起作用，除非用”{1}”开头  </li></ul></li></ol><h2 id="第十三讲-处理日期和时间"><a href="#第十三讲-处理日期和时间" class="headerlink" title="第十三讲 处理日期和时间"></a>第十三讲 处理日期和时间</h2><h3 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h3><ul><li>了解如何使用日期和时间数据，如何创建新的 DateTime实例，如何添加时间，以及如何设置要显示的数据格式。看看 TimeSpan 类  </li></ul><h3 id="简记-11"><a href="#简记-11" class="headerlink" title="简记"></a>简记</h3><ul><li><p><strong>主要内容</strong>  </p><ul><li>时间显示  </li><li>时间、日期的加、减  </li><li>通过<code>TimeSpan</code>确定两个日期之间的差值  </li><li>创建日期的不同方式（创建过去、现在、未来时间）：用DateTime对戏那个构造函数创建时间、用DayTime.parse并传递到一个字符串中  </li></ul></li><li><p>用 . 可以将一个接一个的调用方法连接在一起。例如<code>Console.WriteLinge(myValue.AddDays(3).ToLongDateString());</code>  </p></li></ul><h3 id="课堂代码-4"><a href="#课堂代码-4" class="headerlink" title="课堂代码"></a>课堂代码</h3><pre class="line-numbers language-cs"><code class="language-cs">using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace DatesAndTimes{    class Program    {        static void Main(string[] args)        {            DateTime myValue = DateTime.Now;            //Console.WriteLine(myValue.ToString());    //显示标准当前区域时间            //Console.WriteLine(myValue.ToShortDateString());   //短日期格式            //Console.WriteLine(myValue.ToShortTimeString());   //短时间格式            //Console.WriteLine(myValue.ToLongDateString());    //长日期格式            //Console.WriteLine(myValue.ToLongTimeString());    //长时间格式            //Console.WriteLine(myValue.AddDays(3).ToLongDateString());     //日期加            //Console.WriteLine(myValue.AddHours(3).ToLongTimeString());    //时间加            //Console.WriteLine(myValue.AddDays(-3).ToLongDateString());    //日期减            //Console.WriteLine(myValue.Month);     //月份            //DateTime myBirthday = new DateTime(1995, 12, 7);      //显示过去时间            //Console.WriteLine(myBirthday.ToShortDateString());            DateTime myBirthday = DateTime.Parse("12/7/1969");      //设定出生日期            TimeSpan myAge = DateTime.Now.Subtract(myBirthday);     //计算时间跨度年            Console.WriteLine(myAge.TotalDays);     //年转化为天            Console.ReadLine();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="评估-6"><a href="#评估-6" class="headerlink" title="评估"></a>评估</h3><ol><li><strong>哪种数据类型表示两个特定的DateTime对象之间经过的时间</strong>C  <ul><li>A. SpannedTime  </li><li>B. ElapsedTime  </li><li>C. TimeSpan  </li><li>D. TimeElapsed  </li></ul></li><li><strong>下列哪一项不是初始化新的DateTime对象的有效方式</strong>D  <ul><li>A. DateTime myValue = DateTime.Parse(“12/7/1969”);  </li><li>B. DateTime myValue = new DateTime(1969, 12, 7);  </li><li>C. DateTime myValue = DateTime.Now;  </li><li>D. DateTime myValue = 12/7/1969;  </li></ul></li></ol><h2 id="第十四讲-了解类"><a href="#第十四讲-了解类" class="headerlink" title="第十四讲 了解类"></a>第十四讲 了解类</h2><h3 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h3><ul><li>学习如何定义类和如何创建新实例，如何定义属性，以及如何设置给定类实例的值及获取相应值。  </li></ul><h3 id="简记-12"><a href="#简记-12" class="headerlink" title="简记"></a>简记</h3><ul><li><p>类是相关方法的容器  </p></li><li><p>创建类的短属性模板快速输入：prop + Tab*2  </p></li><li><p>创建类的完整属性模板快速输入：propfull + Tab*2  </p></li><li><p><a href="https://msdn.microsoft.com/zh-cn/library/364x0z75(v=vs.71).aspx" target="_blank" rel="noopener">decimal</a>  </p></li><li><p>为类创建方法 </p></li></ul><h3 id="课堂代码-5"><a href="#课堂代码-5" class="headerlink" title="课堂代码"></a>课堂代码</h3><pre class="line-numbers language-cs"><code class="language-cs">using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace SimpleClasses{    class Program    {        static void Main(string[] args)        {            Car myCar = new Car();      //创建Car类的实例            myCar.Make = "Oldsmobile";            myCar.Model = "Cutlas Supreme";            myCar.Year = 1986;            myCar.Color = "Silver";            Console.WriteLine("{0} {1} {2} {3}",                 myCar.Make,                 myCar.Model,                 myCar.Year,                 myCar.Color);            //decimal value = DetermineMarketValue(myCar);            //Console.WriteLine("{0:C}", value);            Console.WriteLine("{0:C}",myCar.DetermineMarketValue());            Console.ReadLine();        }        private static decimal DetermineMarketValue(Car car)        {            decimal carValue = 100.0M;            //Someda I might look up the car            //online webservice to get more            //accurtge value.            return carValue;        }    }    class Car       //创建Car类    {        public string Make { get; set; }        public string Model { get; set; }        public int Year { get; set; }        public string Color { get; set; }        public decimal DetermineMarketValue()        {            decimal carValue;            if (Year > 1990)            {                carValue = 10000;            }            else            {                carValue = 2000;            }            return carValue;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="评估-7"><a href="#评估-7" class="headerlink" title="评估"></a>评估</h3><ul><li>下列哪一项不是类声明的一部分D<br>  A.重载方法<br>  B.方法<br>  C.属性<br>  D.对象  </li></ul><h2 id="第十五讲-详细了解类和方法"><a href="#第十五讲-详细了解类和方法" class="headerlink" title="第十五讲 详细了解类和方法"></a>第十五讲 详细了解类和方法</h2><h3 id="简介-7"><a href="#简介-7" class="headerlink" title="简介"></a>简介</h3><ul><li>挖掘有关类的更多详细信息:创建新实例，添加类引用，将引用传递到方法。另外，了解重载方法、静态与实例方法以及构造函数。  </li></ul><h3 id="简记-13"><a href="#简记-13" class="headerlink" title="简记"></a>简记</h3><ul><li><p><strong>对象的生存期：</strong>对象变得活跃，生存一段时间，然后死亡，从内存中移除。  </p></li><li><p><strong>.NET Framework 运行库及其在对象创建、维护以及最终从内存中移除中所发挥的作用</strong>  </p></li><li><p><strong>构造函数</strong>是在类的新实例创建时让开发人员能够编写代码的方法  </p></li><li><p><strong>静态方法和属性</strong>  </p></li><li><p>每当发出为类创建新实例的命令时（如 Car myCar = new Car(); ），.NET Framework运行库必须启动，在计算机内存中创建一个点，其大小足以容纳“Car”类中的新实例。计算机内存拥有地址。  </p><ul><li>.NET Framework 的第一个任务是查找没有被占用的可用空地址（目前没有存储、且地址必须足够大，以便存储类的实例）。  </li><li>然后.NET Framework运行库将创建对象实例，并将把目前存储在这个对象实例中的任何值复制到这个内存地址中，并记录对象所放置的位置。它记录放置对象实例的地址，然后将地址返回给我们，我们用实际名称或类的实例名称（“myCar”）存储此地址  </li></ul></li><li><p>可以通过设置对象为空值（myOtherCar = null;）来实现对象被移除，空值并不是零，也不是空字符串，而是不确定。  </p></li><li><p>每当我们将引用设置为空值，或每当超出范围时，我们将移除对象的所有引用。但.NET Framework 运行库本身会了解何时准备就绪（会在后续某个时间），可以从内存中完全移除这些对象。在大多数情况下，这并不是问题。偶尔会发生问题，可以通过“确定收尾”来明确告知系统立即移除相关对象。  </p></li><li><p>构造函数可以理解为在函数类的模板中提前设置某个值，当类的新实例创建时候默认已经是此值。  </p></li><li><p><strong>过载构造函数</strong> 通过调用过载构造函数，可以在实例化时就填写所有值  </p></li><li><p><strong>隐式默认构造函数</strong>在编译时生成，没有输入参数，没有方法正文，但可以让你调用，并创建一致的类的新实例  </p></li><li><p>自定义可以让你对实例化的流程具备控制权  </p></li><li><p>处理包含静态成员的类和包含实例成员的类之间存在根本性差异。实例成员像目前为止的教程操作：有一系列属性描述“Car”等给定类的单一实例，可能是在类似于“Car”的构造函数的单一实例中运行的方法。例如静态方法等静态成员，不会实际在某个单一实例中运行，更类似于实用程序，可以随时调用，独立于类的给定实例甚至应用程序的状态，可以随时使用，因为它们并非实际关联某个具体的“Car”，而是适用于所有“Car”，可以随时使用。此为静态成员和实例成员的区别。  </p></li><li><p>上述两者辨别：如果是静态成员，会包含静态关键词，无法引用任何实例。实例成员类似实例属性，甚至作用于实例属性的实例方法，他们需要类的实例方可运行。主要需明白：类中存在两种成员，尽量不要在同一个类中混合使用  </p></li><li><p>本讲总结：</p><ul><li>对象生存期  </li><li>创建了对象的新实例（在计算机内存总创建一个区域，为我们返回引用内存中这一对象的地址）  </li><li>在对象的生存期内发生了什么情况  </li><li>当移除对对象的所有引用时，会发生什么情况  </li><li>.NET Framework 运行库的角色，及其如何记录对对象的引用数量，以便对内存中不再有引用的对象执行垃圾回收，确保有条理，并让内存可供其他应用程序使用或供应用程序再次使用  </li><li>构造函数，以及开发人员如何在对象创建时用它将对象的新实例设置为有效状态  </li><li>静态关键词，分析了.NET Framework类库内静态成员的一些用法  </li><li>在主方法或自身的方法总自行创建静态成员  </li><li>静态成员和实例成员之间的区别（两者不相容），以及为什么不讨论为什么选择其中一种的原因  </li></ul></li></ul><h3 id="课堂代码-6"><a href="#课堂代码-6" class="headerlink" title="课堂代码"></a>课堂代码</h3><pre class="line-numbers language-cs"><code class="language-cs">using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace ObjectLifeTime{    class Program    {        static void Main(string[] args)        {            Car myCar = new Car();            Car.MyMethod();            /*            myCar.Make = "Oldmobile";            myCar.Model = "Cutlas Supreme";            myCar.Year = 1986;            myCar.Color = "Silver";            */            //Car myThirdCar = new Car("Ford", "Escape", "2005", "White");    //调用过载构造函数            /*            Car myOtherCar;            myOtherCar = myCar;            Console.WriteLine("{0} {1} {2} {3}",                myOtherCar.Make,                myOtherCar.Model,                myOtherCar.Year,                myOtherCar.Color);            myOtherCar.Model = "98";            Console.WriteLine("{0} {1} {2} {3}",                myCar.Make,                myCar.Model,                myCar.Year,                myCar.Color);            myOtherCar = null;            Console.WriteLine("{0} {1} {2} {3}",                myOtherCar.Make,                myOtherCar.Model,                myOtherCar.Year,                myOtherCar.Color);            myCar = null;            */            Console.ReadLine();        }    }    class Car    {        public string Make { get; set; }        public string Model { get; set; }        public int Year { get; set; }        public string Color { get; set; }        /*        public Car()        {            // You could load from a configuration file,            // a database, etc.            Make = "Nissan";        }        public Car(string make, string model, int year, string color)   //过载构造函数        {            Make = make;            Model = model;            Year = year;            Color = color;        }        */        public static void MyMethod()       //静态方法属性        {            Console.WriteLine("Called the static MyMethod");            Console.WriteLine(Make);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="评估-8"><a href="#评估-8" class="headerlink" title="评估"></a>评估</h3><ul><li><p><strong>当前执行范围中不再引用的对象会发生什么情况？</strong>B  </p><ul><li>A. 由.NET Framework运行时保留直到将来再次需要  </li><li>B. 由.NET Framework运行时的垃圾回收器从内存中移除  </li><li>C. 由操作系统从内存中自动移除  </li><li>D. 存储在计算机内存的一个称为堆栈的特殊部分中  </li></ul></li><li><p><strong>关于构造函数，以下语句不正确的是</strong>B  </p><ul><li>A. 系统会自动为你创建一个默认构造函数（无论你是否意识到）  </li><li>B. 你必须使用 static 关键字来定义构造函数  </li><li>C. 你可以按照创建任何重载方法所用的方式来创建重载构造函数  </li><li>D. 当你创建新的类实例时，系统会自动调用构造函数  </li></ul></li></ul><h2 id="第十六讲-了解范围和辅助功能修饰符"><a href="#第十六讲-了解范围和辅助功能修饰符" class="headerlink" title="第十六讲 了解范围和辅助功能修饰符"></a>第十六讲 了解范围和辅助功能修饰符</h2><h3 id="简介-8"><a href="#简介-8" class="headerlink" title="简介"></a>简介</h3><ul><li>探讨变量范围以及 .NET Framework 类库如何使用辅助功能修饰符向给定类的用户显示或隐藏其给定服务的实现  </li></ul><h3 id="简记-14"><a href="#简记-14" class="headerlink" title="简记"></a>简记</h3><ul><li><p><strong>变量范围</strong> 每当在代码块中声明变量时候，这个变量仅在这个代码块、这个代码块的代码块、内部代码块或这个代码块内部的代码块的生存期中活跃。意味着当代码块执行完毕时，在这个代码块内部定义的变量将无法再访问。其值被 .NET Framework 运行库释放。  </p></li><li><p>之前每次创建类时。通常会用 public 关键词，偶尔会用 private 关键词。public 和 private 都是“可访问性修饰符”，用于实施有人参与的面向对象的编程，称为<strong>封装</strong>，此为总要概念。  </p></li><li><p>简而言之，可以将<strong>类</strong>想象成“黑盒子”，所有重要的后台、功能应封装在公共方法和公共属性等界面背后。类也可能存在私有字段，或者在幕后使用的私有方法。类的使用者无须知道类的内部运作，也能处理类、运行类。只需知道通过公共方法中的公共属性所公共显示的内容。“私有”意味着可由同一类中的任何其他方法调用。  </p></li><li><p><strong>公共方法</strong>可以由类别之外的人、给定类别之外的其他代码调用。<strong>私有方法</strong>只可由类内部的成员调用。  </p></li></ul><h3 id="课堂代码-7"><a href="#课堂代码-7" class="headerlink" title="课堂代码"></a>课堂代码</h3><ul><li>此课堂代码主要聚焦于检验变量范围如何运作  <pre class="line-numbers language-cs"><code class="language-cs">using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>namespace UnderstandingScope<br>{<br>    class Program   //类class<br>    {<br>        private static string k = “”;       //私有静态字符k</p><pre><code>    static void Main(string[] args)    {        string j = "";      //在for循环代码块之外定义j        for (int i = 0; i &lt; 10; i++)        {            j = i.ToString();            k = i.ToString();            Console.WriteLine(i);            if (i == 9)            {                string l = i.ToString();    //在if层面定义l            }            //Console.WriteLine(l);           //无法直接引用l        }        //Console.WriteLine(i);        Console.WriteLine("Outside of the for: " + j);      //在for代码块之外访问j        Console.WriteLine("Outside of the for: " + k);        HelperMethod();        Car myCar = new Car();        myCar.DoSomething();    //调用公共方法"DoSometing"        Console.ReadLine();    }    static void HelperMethod()    {        Console.WriteLine("Value of k from the HelperMethod():" + k);    }}class Car   //  类calss： Car ，用来说明封装的概念{    public void DoSomething()       //公共方法    {        Console.WriteLine(helperMethod());    }    private string helperMethod()   //私有方法    {        return "Hello world!";    }}</code></pre><p>}</p><pre><code>### 评估  评估题比较简单，看了本节视频后不会有大问题，略  ## 第十七讲 了解命名空间和如何使用 .NET 类库  ### 简介  * 了解命名空间以及如何通过搜索 Bing 和 MSDN 找到您的应用程序的类  ### 简记  * .NET Framework 类库是一系列类的集合，每一个类均包含我们可在应用程序中使用的方法和功能。  * .NET Framework 类库将自己包含的代码分为多个文件，这些代码文件称为**.NET 程序集**。事实上，我们自己编写的程序，也将最终编译成 .NET 程序集。  * **自行创建类库**  * 完整的 .NET Framework 类库中定义了数万个类，在少数情况下适用了同样的类名称，或至少存在使用同样名称的可能性。如果发生这种情况，创建者需要能够分辨不同的类，因此他们提出了“命名空间”的概念。  * **命名空间**类似于类的“姓氏”  * 在使用应用程序的过程中，所需的类的全程（如控制台类的全程是 System.Console.WriteLine，即 System.Console 类。）在程序一开始就声明了引用文件，则表示希望每当发现无法识别的类引用时，就查看这些命名空间。若在同一个代码中引用了两个名称相同意义不同的类，则可以使用类的全程来进行区分。  * 对于代码顶层开头的一系列 using 引用语句，若引用的文件并未在代码中被使用，则会显示为灰色，这些引用删除也可正常编译代码。  * **为第三方程序集创建引用**  * 网上搜索微软相关代码、文档。关键词** site:microsoft.com 关键词**  ### 课堂代码  ```csusing System;using System.IO;using System.Net;namespace AssembliesAndNamespace{    class Program    {        static void Main(string[] args)        {            WebClient client = new WebClient();            string reply = client.DownloadString("http://msdn.microsoft.com");            Console.WriteLine(reply);            File.WriteAllText(@"C:\Time\Lesson17\WriteText.txt", reply);            Console.ReadLine();        }    }}</code></pre><h3 id="评估-9"><a href="#评估-9" class="headerlink" title="评估"></a>评估</h3><ul><li><strong>命名空间</strong>主要是：C  <ul><li>A. 一种将方法组织为类的方式  </li><li>B. 一种将类组织为程序集 的方法  </li><li>C. 一种消除库中类名称歧义的方式  </li><li>D. 一种将类组织为项目的方式  </li></ul></li></ul><h2 id="第十八讲-创建和添加对程序集的引用"><a href="#第十八讲-创建和添加对程序集的引用" class="headerlink" title="第十八讲 创建和添加对程序集的引用"></a>第十八讲 创建和添加对程序集的引用</h2><h3 id="简介-9"><a href="#简介-9" class="headerlink" title="简介"></a>简介</h3><ul><li>了解 .NET 程序集:代码库和可执行文件、程序集的调试和发布版本。另外，了解如何引用程序集，利用 NuGet，并创建对自定义库的引用  </li></ul><h3 id="简记-15"><a href="#简记-15" class="headerlink" title="简记"></a>简记</h3><ul><li><p>为程序集添加引用的三种方法：  </p><ul><li><ol><li>来自 .NET Framework 类库的程序集  </li></ol></li><li><ol start="2"><li>使用解决方案资源管理器，右键单击引用，然后选择“添加引用”进行添加<br>采用开放源代码，通过名为“NuGet”的特殊工具获取  </li></ol></li><li><ol start="3"><li>当需要为之前创建的类库添加引用时  </li></ol></li></ul></li></ul><h3 id="评估-10"><a href="#评估-10" class="headerlink" title="评估"></a>评估</h3><ul><li><p>若想创建一个可在多个项目中重复使用的外部代码库，应该D  </p><ul><li>A. 将第二个项目添加到我的解决方案中  </li><li>B. 创建一个代码库  </li><li>C. 将一个类添加到我的项目中  </li><li>D. 创建一个新的类库项目  </li></ul></li><li><p>在项目中使用程序集的第一步是：D  </p><ul><li>A. 将程序集添加到你的项目文件夹  </li><li>B. 添加一条引用程序集中命名空间的 using 语句  </li><li>C. 在“项目属性” 页的“引用”选项卡中添加程序集名称  </li><li>D. 使用“添加引用”对话框添加对程序集的引用  </li></ul></li></ul><h2 id="第十九讲-使用集合"><a href="#第十九讲-使用集合" class="headerlink" title="第十九讲 使用集合"></a>第十九讲 使用集合</h2><h3 id="简介-10"><a href="#简介-10" class="headerlink" title="简介"></a>简介</h3><ul><li>看到“旧式”集合以及几个利用泛型语法的较新强类型泛型集合(列表 和字典 )  </li></ul><h3 id="简记-16"><a href="#简记-16" class="headerlink" title="简记"></a>简记</h3><ul><li><p>两种集合：列表（List）和词典（Dictionary）  </p></li><li><p>集合通过一种名为LINQ的语言技术，提供丰富的筛选、排序和聚合功能。LINQ（Language Integrated Query 语言集成查询）  </p></li><li><p><strong>ArrayList</strong>集合大小是动态的，无需再进行其他诸如一次次分别添加项之类的操作。支持诸如排序等实用功能，可以从集合中移除项  </p></li><li><p>ArrayList存在问题：无法以一种简单的方法来限制将要存储到数组中的数据类型。  </p></li><li><p>集合实质都是泛型的，但需要去规定该集合内允许的数据类型，使其具有针对性。  </p></li><li><p><strong>词典集合</strong>与网络搜索词典类似，当你需要查询一个词，你会按照字母顺序来找到它，并找到需要下定义的这个词。一旦找到后，你可以在它的右侧看到相关定义。字典中的每个条目都包含了两个组件：<strong>键和值本身</strong>。  </p></li><li><p>集合初始值设定语法  </p></li><li><p>集合初始值设定项  </p></li><li><p>总结：  </p><ul><li><strong>数组和集合间的差别</strong>  </li><li><strong>旧式集合和新式泛型集合</strong>：新式泛型集合更先进，能确保我们只能将特定的数据类别加入集合中，以便我们通过传入该集合内允许引用的数据类型，将泛型集合变为特定集合。  </li><li><strong>对象初始值设定项</strong>：是一种简写语法，用于初始化对象的新实例的属性  </li><li><strong>集合初始值设定项</strong>，不仅创建新的集合，还使用汽车集合新实例初始化集合  </li></ul></li></ul><h3 id="本节代码"><a href="#本节代码" class="headerlink" title="本节代码"></a>本节代码</h3><pre class="line-numbers language-cs"><code class="language-cs">using System;using System.Collections;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace WorkingwithCollectiongs{    class Program    {        static void Main(string[] args)        {            /*            Car car1 = new Car();            car1.Make = "Oldsmobile";            car1.Model = "Cutlas Supreme";            car1.VIN = "A1";            Car car2 = new Car();            car2.Make = "Geo";            car2.Model = "Prism";            car2.VIN = "B2";            Book b1 = new Book();            b1.Author = "Robert Tabor";            b1.Title = "Microsoft .NET XML Web Services";            b1.ISBN = "0-000-00000-0";            */            /*            // ArrayLists are dynamically sized,            // cool features sorting, remove items            ArrayList myArrayList = new ArrayList();            myArrayList.Add(car1);            myArrayList.Add(car2);            myArrayList.Add(b1);            myArrayList.Remove(b1);            foreach (Car car in myArrayList)            {                Console.WriteLine(car.Make);            }            */            /*            // 泛型列表            // List<T>            List<Car> myList = new List<Car>();     // 汽车专用数据类型列表            myList.Add(car1);            myList.Add(car2);            //myList.Add(b1);     //无法将书添加到该列表中            foreach (Car car in myList)            {                Console.WriteLine(car.Model);            }            */            /*            // 词典            // Dictionary<Tkey,Tvalue>            Dictionary<string, Car> myDictionary = new Dictionary<string, Car>();       // 创建字典            myDictionary.Add(car1.VIN, car1);       // 将汽车数据加入字典            myDictionary.Add(car2.VIN, car2);            Console.WriteLine(myDictionary["B2"].Make);     // 由特定关键值输出字典数据            */            //string[] names = { "Bob", "Steve", "Brian", "Chunk" };            // Object initializer 初始值设定项语法            // No need for a Constructor 无须构造函数            //Car car1 = new Car() { Make = "BMW", Model = "750li", VIN = "C3" };      // 创建变量，创建汽车实例，填充属性            //Ca/r car2 = new Car() { Make = "Toyota", Model = "4Runnner", VIN = "D4" };            // Collection initializer 集合初始值设定项            // 创建集合并添加两个对象，并在每个对象中对所有属性值进行初始化            List<Car> myList = new List<Car>() {                new Car{Make = "Oldsmobile", Model = "Cutlas Supreme", VIN = "E5"},                new Car{Make = "Nissan" , Model = "Altima" , VIN = "F6" }            };            Console.WriteLine();        }    }    class Car    {        public string VIN { get; set; }        public string Make { get; set; }        public string Model { get; set; }    }    class Book    {        public string Title { get; set;}        public string Author { get; set;}        public string ISBN { get; set; }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第二十讲-使用-LINQ"><a href="#第二十讲-使用-LINQ" class="headerlink" title="第二十讲 使用 LINQ"></a>第二十讲 使用 LINQ</h2><h3 id="简介-11"><a href="#简介-11" class="headerlink" title="简介"></a>简介</h3><ul><li>观看使用枚举的演示、创建自定义枚举，然后在演示第三个判定语句 (switch) 的简单应用程序中使用该枚举  </li></ul><h3 id="简记-17"><a href="#简记-17" class="headerlink" title="简记"></a>简记</h3><ul><li>两种不同的LINQ语法：  <ul><li>用于查询数据库的类似于用于结构化查询语言（SQL）的查询语法  </li><li>C#开发人员更熟悉的方法语法，但存在较奇怪的明明问题  </li></ul></li></ul><ul><li><p>LINQ查询语法  </p></li><li><p>LINQ方法语法  </p></li><li><p>相关语句</p><ul><li><p><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables" target="_blank" rel="noopener">var 关键词</a>为强类型化关键字。与JavaScrip或Visual Basic 含义有所不同。在本讲中表示让编译器来决定正确的数据类型是什么。  </p></li><li><p><a href="https://msdn.microsoft.com/zh-cn/library/bb534966(v=vs.110).aspx" target="_blank" rel="noopener">orderby</a>  </p></li><li><p><a href="https://msdn.microsoft.com/zh-cn/library/bb548891(v=vs.110).aspx" target="_blank" rel="noopener">select</a>  </p></li><li><p><a href="https://msdn.microsoft.com/zh-cn/library/bb535050(v=vs.110).aspx" target="_blank" rel="noopener">First</a>  </p></li><li><p><a href="https://msdn.microsoft.com/zh-cn/library/x2kykt9x(v=vs.110).aspx" target="_blank" rel="noopener">trueforall</a> 适合于聚合和全部查看以及检验列表中所有项是否都为真  </p></li><li><p><a href="https://msdn.microsoft.com/zh-cn/library/system.io.file.exists(v=vs.110).aspx" target="_blank" rel="noopener">Exists</a> 确定指定的文件是否存在  </p></li></ul></li></ul><h3 id="本节代码-1"><a href="#本节代码-1" class="headerlink" title="本节代码"></a>本节代码</h3><pre class="line-numbers language-cs"><code class="language-cs">using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace UnderstandingLINQ{    class Program    {        static void Main(string[] args)        {            List<Car> myCars = new List<Car>() {                new Car() { VIN="A1", Make = "BMW", Model= "550i", StickerPrice=55000, Year=2009},                new Car() { VIN="B2", Make="Toyota", Model="4Runner", StickerPrice=35000, Year=2010},                new Car() { VIN="C3", Make="BMW", Model = "745li", StickerPrice=75000, Year=2008},                new Car() { VIN="D4", Make="Ford", Model="Escape", StickerPrice=25000, Year=2008},                new Car() { VIN="E5", Make="BMW", Model="55i", StickerPrice=57000, Year=2010}            };            // LINQ query LINQ查询语法            /*// 条件查找            var bmws = from car in myCars                       where car.Make == "BMW"                       &&  car.Year == 2010                       select car;            */            /*// 按年份排序            var orderedCars = from car in myCars                              orderby car.Year descending                              select car;            */            // LINQ method 方法语法            // var bmws = myCars.Where(p => p.Make == "BMW" && p.Year == 2010);            // var orderedCars = myCars.OrderByDescending(p => p.Year);            // var firstBMW = myCars.First(p => p.Make == "BMW");      // 输出查找结果第一项            /*            var firstBMW = myCars.OrderByDescending(p => p.Year).First(p => p.Make == "BMW");       // 取按年份排序第一项            Console.WriteLine(firstBMW.VIN);            */            //Console.WriteLine(myCars.TrueForAll(p => p.Year > 2002));       // 判断某个属性是否都符合某个要求            //myCars.ForEach(p => p.StickerPrice -= 3000);        // 从每项基础估价中减去3000            //myCars.ForEach(p => Console.WriteLine("{0}{1:C}", p.VIN, p.StickerPrice));  // 简短化代码：有序输出并估价            //Console.WriteLine(myCars.Exists(p => p.Model == "745li"));  // 检查指定的 745li 是否存在            //Console.WriteLine(myCars.Sum(p => p.StickerPrice));     // 重点：聚合：所有对象中单个字段的和            Console.WriteLine(myCars.GetType());            var orderedCars = myCars.OrderByDescending(p => p.Year);            Console.WriteLine(orderedCars.GetType());            /*            foreach (var car in orderedCars)            {                Console.WriteLine("{0} {1}", car.Year, car.Model, car.VIN);            }            */            Console.ReadLine();        }    }    class Car    {        public string VIN { get; set; }        public string Make { get; set; }        public string Model { get; set; }        public int Year { get; set; }        public double StickerPrice { get; set; }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第二十一讲-枚举和-Switch-判定语句"><a href="#第二十一讲-枚举和-Switch-判定语句" class="headerlink" title="第二十一讲 枚举和 Switch 判定语句"></a>第二十一讲 枚举和 Switch 判定语句</h2><h3 id="简介-12"><a href="#简介-12" class="headerlink" title="简介"></a>简介</h3><ul><li>观看使用枚举的演示、创建自定义枚举，然后在演示第三个判定语句 (switch) 的简单应用程序中使用该枚举  </li></ul><h3 id="简记-18"><a href="#简记-18" class="headerlink" title="简记"></a>简记</h3><ul><li><p>一个特殊的数据类型：枚举。优势：它们是描述性的，并且能够限制我们的应用程序以及我们的类的属性的可能值数量  </p></li><li><p>评估点:枚举主要用于：限制给定属性或变量可以设置的值的数量  </p></li></ul><h3 id="本节代码-2"><a href="#本节代码-2" class="headerlink" title="本节代码"></a>本节代码</h3><pre class="line-numbers language-cs"><code class="language-cs">using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace EnumsAndSwitch{    class Program    {        static void Main(string[] args)        {            List<Todo> todos = new List<Todo>()            {                new Todo { Description = "Task 1", EstimatedHours = 6, Status = Status.Completed },                new Todo { Description = "Task 2", EstimatedHours = 2, Status = Status.InProgress },                new Todo { Description = "Task 3", EstimatedHours = 8, Status = Status.NotStarted },                new Todo { Description = "Task 4", EstimatedHours = 12, Status = Status.Deleted },                new Todo { Description = "Task 5", EstimatedHours = 6, Status = Status.InProgress },                new Todo { Description = "Task 6", EstimatedHours = 2, Status = Status.NotStarted },                new Todo { Description = "Task 7", EstimatedHours = 14, Status = Status.NotStarted },                new Todo { Description = "Task 8", EstimatedHours = 8, Status = Status.Completed },                new Todo { Description = "Task 9", EstimatedHours = 8, Status = Status.InProgress },                new Todo { Description = "Task 10", EstimatedHours = 8, Status = Status.Completed },                new Todo { Description = "Task 11", EstimatedHours = 4, Status = Status.NotStarted },                new Todo { Description = "Task 12", EstimatedHours = 10, Status = Status.Completed },                new Todo { Description = "Task 13", EstimatedHours = 12, Status = Status.Deleted },                new Todo { Description = "Task 14", EstimatedHours = 6, Status = Status.Completed }            };            Console.ForegroundColor = ConsoleColor.DarkRed;            PrintAssessment(todos);            Console.ReadLine();        }        private static void PrintAssessment(List<Todo> todos)        {            foreach (var todo in todos)            {                switch (todo.Status)                {                    case Status.NotStarted:                        Console.ForegroundColor = ConsoleColor.DarkRed;                        break;                    case Status.InProgress:                        Console.ForegroundColor = ConsoleColor.Green;                        break;                    case Status.OnHold:                        Console.ForegroundColor = ConsoleColor.DarkRed;                        break;                    case Status.Completed:                        Console.ForegroundColor = ConsoleColor.Blue;                        break;                    case Status.Deleted:                        Console.ForegroundColor = ConsoleColor.Yellow;                        break;                    default:                        break;                }                Console.WriteLine(todo.Description);            }        }    }    class Todo    {        public string Description { get; set; }     // 待办项描述        public int EstimatedHours { get; set; }     // 待办项需要小时数        public Status Status { get; set; }          // 状态类型    }    enum Status         // 状态枚举    {        NotStarted,     // 尚未开始        InProgress,     // 进行中        OnHold,         // 暂停        Completed,      // 已完成        Deleted         // 已删除    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第二十二讲-正常处理异常"><a href="#第二十二讲-正常处理异常" class="headerlink" title="第二十二讲 正常处理异常"></a>第二十二讲 正常处理异常</h2><h3 id="简介-13"><a href="#简介-13" class="headerlink" title="简介"></a>简介</h3><ul><li>了解如何使用 try catch finally 块预测潜在问题，以使最终用户尽量避免遇到这些问题。探讨检查异常时的最佳做法  </li></ul><h3 id="简记-19"><a href="#简记-19" class="headerlink" title="简记"></a>简记</h3><ul><li><p><a href="https://msdn.microsoft.com/zh-cn/library/system.io.file.readalltext(v=vs.110).aspx" target="_blank" rel="noopener">File.ReadAllText</a> 打开一个文本 文件，将文件的所有行读入一个字符串，然后关闭该文件  </p></li><li><p>将一些内容包括到 try/catch 中，并且尽量考虑到你有可能要处理的异常，寻找到那些据你所知某个特定方法可能导致的具体异常。  </p></li><li><p><a href="https://msdn.microsoft.com/zh-cn/library/system.exception.message(v=vs.110).aspx" target="_blank" rel="noopener">ex.Message</a> 获取描述当前异常的消息  </p></li><li><p><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/try-finally" target="_blank" rel="noopener">finally</a>  </p></li></ul><h2 id="第二十三讲-了解事件和事件驱动编程"><a href="#第二十三讲-了解事件和事件驱动编程" class="headerlink" title="第二十三讲 了解事件和事件驱动编程"></a>第二十三讲 了解事件和事件驱动编程</h2><h3 id="简介-14"><a href="#简介-14" class="headerlink" title="简介"></a>简介</h3><ul><li>了解如何在 .NET Framework 类库中使用事件。从使用 Timer 类入手，逐步构建一个基本的 “Hello World” 应用程序  </li></ul><h3 id="简记-20"><a href="#简记-20" class="headerlink" title="简记"></a>简记</h3><ul><li><p><strong>事件驱动编程</strong>是Microsoft的presentation API 的核心，无论对于 Web 还是 Windows 都是如此。可以说它是.NET Framework类库中所有其他 API 的核心。它是帮助构建具有真实用户界面的真实应用程序的必经步骤。  </p></li><li><p>利用事件，开发人员能够通过处理应用程序执行生命周期中的关键时刻来作出响应，你可以编写代码来响应出现的事件。  </p></li><li><p>后续分支可学习方向：ASP.net、WPF、UWP  </p></li></ul><h3 id="本讲代码"><a href="#本讲代码" class="headerlink" title="本讲代码"></a>本讲代码</h3><h4 id="cs"><a href="#cs" class="headerlink" title="cs"></a>cs</h4><pre class="line-numbers language-cs"><code class="language-cs">using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;using System.Timers;namespace TimerExample{    class Program    {        static void Main(string[] args)        {            Timer myTimer = new Timer(2000);            myTimer.Elapsed += MyTimer_Elapsed;   // MyTimer_Elapsed的事件附加或注册到Elapsed事件            myTimer.Elapsed += MyTimer_Elapsed1;  // 运算符+=作用：指定多少在订阅或被附加到这个事件的当前项也附加上另一个事件处理程序            myTimer.Start();  // 计时器开始            Console.WriteLine("Press enter to remove the red event.");            Console.ReadLine();            myTimer.Elapsed -= MyTimer_Elapsed1;            Console.ReadLine();        }        private static void MyTimer_Elapsed1(object sender, ElapsedEventArgs e)        {            Console.ForegroundColor = ConsoleColor.Red;            Console.WriteLine("Elapsed1:{0:HH:mm:ss.fff}", e.SignalTime);        }        private static void MyTimer_Elapsed(object sender, ElapsedEventArgs e)        {            Console.ForegroundColor = ConsoleColor.White;            Console.WriteLine("Elapsed:{0:HH:mm:ss.fff}", e.SignalTime);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="WPF"><a href="#WPF" class="headerlink" title="WPF"></a>WPF</h4><ul><li><p>布局<br><img src="https://res.cloudinary.com/imgcave/image/upload/v1592731714/Img/BlogCover/23_WPF_1_usxrat.png" alt="WPF布局图片">  </p></li><li><p>代码  </p><pre class="line-numbers language-cs"><code class="language-cs">  using System;  using System.Collections.Generic;  using System.Linq;  using System.Text;  using System.Threading.Tasks;  using System.Windows;  using System.Windows.Controls;  using System.Windows.Data;  using System.Windows.Documents;  using System.Windows.Input;  using System.Windows.Media;  using System.Windows.Media.Imaging;  using System.Windows.Navigation;  using System.Windows.Shapes;  namespace WPFEvents  {      /// <summary>      /// MainWindow.xaml 的交互逻辑      /// </summary>      public partial class MainWindow : Window      {          public MainWindow()          {              InitializeComponent();              button.Click += button_MyOtherClick;          }          private void button_MyOtherClick(object sender, RoutedEventArgs e)          {              myOtherLable.Content = "Hello again!";          }          private void button_Click(object sender, RoutedEventArgs e)          {              myLabel.Content = "Hello ezhq.xyz";          }      }  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="第二十四讲-下一步该怎么做"><a href="#第二十四讲-下一步该怎么做" class="headerlink" title="第二十四讲 下一步该怎么做"></a>第二十四讲 下一步该怎么做</h2><h3 id="简介-15"><a href="#简介-15" class="headerlink" title="简介"></a>简介</h3><p>了解解决常见问题的方法，去何处寻求帮助，如何寻找问题的答案，并成为 .NET 社区的一部分。查看详细了解开发应用程序的长期路径  </p><h3 id="简记-21"><a href="#简记-21" class="headerlink" title="简记"></a>简记</h3><ul><li><p>学会搜索  </p></li><li><p>相关提问技巧  </p></li><li><p>寻求帮助去处：  </p><ul><li><strong>MSDN论坛</strong>：<a href="https://social.msdn.microsoft.com/forums/" target="_blank" rel="noopener">https://social.msdn.microsoft.com/forums/</a>  </li></ul></li><li><p>后续学习建议：</p><ul><li><p>诸如SQL serve 的关系数据库知识  </p></li><li><p>学习如何使用.net API的 Entity Framework 部分来访问数据库内存储的信息，访问应用中的数据  </p></li><li><p>不知后续如何，可从HTML5、CSS3 和 JavaScript 入手  </p></li><li><p>一些可供选择的关键词：</p><ul><li><p><strong>面向对象编程</strong>  </p></li><li><p><strong>软件开发原理</strong>（如<strong>驱进原理</strong>、<strong>YAGNI原则</strong>、<strong>依赖关系注入</strong>（对于使用asp.net core MVC 等来创建某些新型应用程序非常重要）、<strong>SOLID</strong>（每个字母代表一个不同的次级原理，帮助你意识到你的应用程序中的面向对象的编程的可能））  </p></li><li><p><strong>软件开发的过程</strong>、<strong>有关软件开发和管理软件项目的工作流程</strong>（即团队工作时需要用到的特定工具和技术，利用 Git 或 Visual Studio Online等源代码存储库或是团队自己的内部源代码存储库工具来与团队成员分享、执行或获得源代码）  </p></li><li><p><strong>构建单元测试</strong>  </p></li><li><p><strong>敏捷项目管理</strong>、<strong>敏捷软件开发</strong>、<strong>迭代开发的性质</strong>  </p></li></ul></li></ul></li></ul><h2 id="附1：语法集合"><a href="#附1：语法集合" class="headerlink" title="附1：语法集合"></a>附1：语法集合</h2><ul><li><a href="https://msdn.microsoft.com/zh-cn/library/ezftk57x(v=vs.110).aspx" target="_blank" rel="noopener">String.ToCharArray方法()</a>  </li><li><a href="https://msdn.microsoft.com/zh-tw/library/d3877932(v=vs.110).aspx" target="_blank" rel="noopener">Array.Reverse方法(Array)</a>  </li><li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/foreach-in" target="_blank" rel="noopener">foreach in</a>  </li><li><a href="https://msdn.microsoft.com/zh-cn/library/b3h1hf19(v=vs.100).aspx" target="_blank" rel="noopener">int32.Parse(String)</a>  </li><li><a href="https://msdn.microsoft.com/zh-cn/library/system.console.clear(v=vs.110).aspx" target="_blank" rel="noopener">Console.Clear</a>  </li><li><a href="https://msdn.microsoft.com/zh-cn/library/system.random(v=vs.110).aspx" target="_blank" rel="noopener">Random</a>  </li><li><a href="https://msdn.microsoft.com/zh-cn/library/2dx6wyd4(v=vs.110).aspx" target="_blank" rel="noopener">Random.Next(Int32, Int32)</a>  </li><li><a href="https://msdn.microsoft.com/zh-cn/library/system.string.format(v=vs.110).aspx" target="_blank" rel="noopener">String.Format</a>  </li><li><a href="https://msdn.microsoft.com/zh-cn/library/hxthx5h6(v=vs.110).aspx" target="_blank" rel="noopener">String.Substring(Int32)</a>  </li><li><a href="https://msdn.microsoft.com/zh-cn/library/aka44szs(v=vs.110).aspx" target="_blank" rel="noopener">String.Substring(Int32,Int32)</a>  </li><li><a href="https://msdn.microsoft.com/zh-cn/library/ewdd6aed(v=vs.110).aspx" target="_blank" rel="noopener">String.ToUpper()</a>  </li><li><a href="https://msdn.microsoft.com/zh-cn/library/czx8s9ts(v=vs.110).aspx" target="_blank" rel="noopener">String.Replace(Char, Char)</a>  </li><li><a href="https://msdn.microsoft.com/zh-cn/library/d8d7z2kk(v=vs.110).aspx" target="_blank" rel="noopener">String.Remove(Int32, Int32)</a>  </li><li><a href="https://msdn.microsoft.com/zh-cn/library/t97s7bs3(v=vs.110).aspx" target="_blank" rel="noopener">String.Trim()</a>  </li><li><a href="https://msdn.microsoft.com/zh-cn/library/system.text.stringbuilder(v=vs.110).aspx" target="_blank" rel="noopener">StringBuilder</a>  </li><li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/base-types/standard-numeric-format-strings" target="_blank" rel="noopener">标准数字格式字符串（英语）</a>  </li><li><a href="https://msdn.microsoft.com/zh-cn/library/241ad66z(v=vs.80).aspx" target="_blank" rel="noopener">标准数字格式字符串（中文）</a>  </li><li><a href="https://msdn.microsoft.com/zh-cn/library/364x0z75(v=vs.71).aspx" target="_blank" rel="noopener">decimal</a>  </li><li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables" target="_blank" rel="noopener">Var</a>  </li><li><a href="https://msdn.microsoft.com/zh-cn/library/bb534966(v=vs.110).aspx" target="_blank" rel="noopener">orderby</a>  </li><li><a href="https://msdn.microsoft.com/zh-cn/library/bb548891(v=vs.110).aspx" target="_blank" rel="noopener">select</a>  </li><li><a href="https://msdn.microsoft.com/zh-cn/library/bb535050(v=vs.110).aspx" target="_blank" rel="noopener">First</a>  </li><li><a href="https://msdn.microsoft.com/zh-cn/library/x2kykt9x(v=vs.110).aspx" target="_blank" rel="noopener">trueforall</a>  </li><li><a href="https://msdn.microsoft.com/zh-cn/library/system.io.file.exists(v=vs.110).aspx" target="_blank" rel="noopener">Exists</a>  </li><li><a href="https://msdn.microsoft.com/zh-cn/library/system.io.file.readalltext(v=vs.110).aspx" target="_blank" rel="noopener">File.ReadAllText</a>  </li><li><a href="https://msdn.microsoft.com/zh-cn/library/system.exception.message(v=vs.110).aspx" target="_blank" rel="noopener">ex.Message</a>  </li><li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/try-finally" target="_blank" rel="noopener">finally</a>  </li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MDN《学习Web开发》教程中网站提交的补充</title>
      <link href="cn/2017042201/"/>
      <url>cn/2017042201/</url>
      
        <content type="html"><![CDATA[<h2 id="简要说明"><a href="#简要说明" class="headerlink" title="简要说明"></a>简要说明</h2><ul><li>这篇博客是关于 MDN &gt; 学习Web开发 &gt; Web开发入门 &gt; 发布网站 这一教程的补充。  </li><li>补充/解决问题内容：用 Git 发布之前做好的网站的过程实现。  </li></ul><h2 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h2><p>MDN中关于网站发布选用的方法是使用在线工具GitHub，本身并没有什么问题，对于入门者也比较合适（免费，方便，实现过程容易描述）。但是教程对于提交网站文件的描述是较为模糊的。在亲自按照教程实现后，发现有很大几率并不能实现教程设想的结果。<br>问题点：  </p><ul><li>教程中是直接用命令行提交的网站文件，但是对于计算机和自己的GitHub账号绑定并设置密钥没有提及，而这个又会影响到网站文件的提交。  </li><li>此情况适用于自己电脑在之前并没有安装过Git及绑定GitHub账号的情况。  </li></ul><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><ol><li><p>Git安装<br>这个步骤按照教程走没太大问题，直接安装Git即可。GitHub建立仓库也没太大问题，需要注意的是Repository name 填写的时候要准确填写自己的GitHub用户名（若你的用户名为“John”,则填写内容为“John.github.io”）.然后点击“Create repository”创建仓库即可。  </p></li><li><p>将文件上传到 GitHub<br>教程中这部分是容易出问题的地方。按照教程来走，很容易失败，达不到最终理想效果。<br>在参照教程中“将文件上传到GitHub”这部分之前，最好先进行下面步骤3“绑定GitHub账号”的操作。  </p></li><li><p>绑定GitHub账号  </p></li></ol><ul><li>打开Git命令窗口：在桌面右键，选择“Git Bash Here”，打开命令窗口。  </li><li>创建密钥步骤1：输入命令 <code>ssh-keygen -t rsa -C "your_email@example.com"</code>(操作中要将命令中双引号里的your_email@example替换为你自己GitHub绑定的邮箱地址)。  </li><li>创建密钥步骤2: 当窗口弹出 <code>Enter file in which to ...</code> 的命令时候，可以直接按下回车Enter键即可；然后弹出 <code>Enter passphrass ...</code> 时可以直接按下回车键；弹出 <code>Enter same passphrase ...</code> 时直接按下回车键。  </li><li>此时命令窗口会显示 <code>Your identification has been ...</code> 的信息，这时候输入命令 <code>clip &lt; ~/.ssh/id_rsa.pub</code> 并回车（此步骤是复制公钥信息以备下个步骤使用）。  </li><li>给自己GitHub账号添加SSH密钥信息：在GitHub网站主页点击右上角自己的头像，在弹出的菜单中选择“Settings”,在新的网页中左侧列表里选择“SSH and GPG keys”,然后在右侧点击绿色按钮“New SSH key”,在出现的界面中Tittle里随意填写个名字（如MDNWebSSH），在Key框内直接进行粘贴操作即可（在框内鼠标右键点击，选择“粘贴”即可，因为上一个步骤里已经通过命令行复制了相关信息），最后点击下面的绿色按钮“Add SSH key”即可。  </li></ul><ol start="4"><li>提交网站文件  </li></ol><ul><li>在自己的网站文件夹里，右键选择“Git Bash Here”打开Git命令窗口。  </li><li>对于MDN教程中“将文件上传到GitHub”步骤一 <code>cd Desktop...</code> 的命令可以忽略。  </li><li>之后的命令从步骤二中的“git init”开始可以往后，可以直接参照教程进行操作，就不会有太大问题。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Git </tag>
            
            <tag> Frontend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo添加网易云音乐</title>
      <link href="cn/2016122203/"/>
      <url>cn/2016122203/</url>
      
        <content type="html"><![CDATA[<h2 id="一-简要介绍"><a href="#一-简要介绍" class="headerlink" title="一 简要介绍"></a>一 简要介绍</h2><p>本方法适用于对Hexo框架网站添加网易云音乐播放器插件，本例在Hexo框架的Next主题下进行，将网易云音乐插件添加到侧边栏上。另外，浏览器广告拦截插件有一定几率造成插件不加载。  </p><h2 id="二-选择音乐"><a href="#二-选择音乐" class="headerlink" title="二 选择音乐"></a>二 选择音乐</h2><ol><li>在网易云音乐网页版上选择想要布置的音乐（这里以Family of the Year的《Hero》为例）；  </li><li>在歌曲详细页上点击“生成外链播放器”；<br><img src="https://res.cloudinary.com/imgcave/image/upload/v1592666275/Img/BlogCover/aurdes_01_hwowlt.png" alt="1.Example"></li><li>对插件进行个性化修改（建议为了网站浏览体验，，取消自动播放），并点击“复制代码”；<br><img src="https://res.cloudinary.com/imgcave/image/upload/v1592666315/Img/BlogCover/aurdes_02_jgm2t9.png" alt="2.Example"></li></ol><h2 id="三-修改网页样式文件"><a href="#三-修改网页样式文件" class="headerlink" title="三 修改网页样式文件"></a>三 修改网页样式文件</h2><ol><li>打开本地网页Hexo文件夹内的sidebar.swig文件，具体目录为：Hexo\themes\Next\layout_macro\sidebar.swig（注：本路径中Next为自己的网页主题文件夹名，不同主题名称不同，路径都类似。）  </li><li>在打开的sidebar.swig文件如图合适位置上粘贴上面复制的代码。<br><img src="https://res.cloudinary.com/imgcave/image/upload/v1592666343/Img/BlogCover/aurdes_03_juffot.png" alt="3.Example"></li><li>在主目录下执行Git Bash命令,完成修改后文件上传：<pre class="line-numbers language-bash"><code class="language-bash">hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="四-最终效果"><a href="#四-最终效果" class="headerlink" title="四 最终效果"></a>四 最终效果</h2><img src="https://res.cloudinary.com/imgcave/image/upload/v1592666374/Img/BlogCover/aurdes_04_dl0kco.png" alt="4.Example"></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino Workshop</title>
      <link href="cn/2016112208/"/>
      <url>cn/2016112208/</url>
      
        <content type="html"><![CDATA[<h2 id="一-起步"><a href="#一-起步" class="headerlink" title="一 起步"></a>一 起步</h2><p><strong>章节内容</strong>  </p><ul><li>简要介绍 Arduino 能做什么以及一些作品  </li><li>Arduino 集成开发环境(IDE)的安装  </li><li>关于 Arduino 使用的一些安全提示  </li></ul><h3 id="所需的软件"><a href="#所需的软件" class="headerlink" title="所需的软件"></a>所需的软件</h3><p><a href="https://www.arduino.cc/en/Main/Software" target="_blank" rel="noopener">Arduino IDE 官方下载页面（包含各系统对应版本）</a>  </p><h4 id="Windows-XP-及后续版本"><a href="#Windows-XP-及后续版本" class="headerlink" title="Windows XP 及后续版本"></a>Windows XP 及后续版本</h4><ol><li>Windows 版本的Arduino IDE 下载后为一个压缩包，解压后即为软件以及相关文件，无需安装过程。可以将软件包放到自己想要放到的位置，然后直接为软件包内的 arduio.exe 创建一个桌面快捷方式即可。  </li><li>软件下载并解压好后需要安装驱动才可进行后续工作。  </li><li>不能忘记在IDE软件内设置 Arduino 的型号和串口号。  </li><li>Tips：软件语言可以设置为英文或中文。在软件菜单 File —— Preference 中设置。  </li></ol><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><ul><li>Arduino 几乎不需要用到市电。  </li></ul><hr><h2 id="二-探索-Arduino-板和-IDE"><a href="#二-探索-Arduino-板和-IDE" class="headerlink" title="二 探索 Arduino 板和 IDE"></a>二 探索 Arduino 板和 IDE</h2><p><strong>章节内容</strong>  </p><ul><li>介绍基本Arduino板上主要小部件  </li><li>Arduino IDE 简要介绍  </li><li>Arduino 程序的基本结构以及检查和修改  </li></ul><h3 id="Arduino-板"><a href="#Arduino-板" class="headerlink" title="Arduino 板"></a>Arduino 板</h3><ol><li>带 ~ 符号的引脚都可以进行模拟信号的操作。  </li><li>引脚A4、A5和引脚0、1均也是串口，可以用来与其他器件发送和接收数据。  </li><li>使用多个盾板时，要记住每块盾板都用了哪些引脚，避免相互引起冲突。  </li></ol><h3 id="在-IDE-里创建第一个程序"><a href="#在-IDE-里创建第一个程序" class="headerlink" title="在 IDE 里创建第一个程序"></a>在 IDE 里创建第一个程序</h3><h4 id="setup-函数"><a href="#setup-函数" class="headerlink" title="setup 函数"></a>setup 函数</h4><ul><li>setup 函数只在每次开机或重启时执行一次。  </li></ul><h4 id="loop-函数"><a href="#loop-函数" class="headerlink" title="loop 函数"></a>loop 函数</h4><ul><li>loop 函数是程序运行期间持续循环运行的部分。  </li><li>Arduino IDE 不会自动保存当前文件，需要经常手动保存当前文件。  </li><li>引脚控制中，HIGH 和 LOW 可以分别用 1 和 0 代替，效果一样。  </li></ul><h4 id="检查程序"><a href="#检查程序" class="headerlink" title="检查程序"></a>检查程序</h4><ul><li>程序出错时，错误一般出在高亮标识的那一行或前一行。  </li></ul><hr><h2 id="三-第一步"><a href="#三-第一步" class="headerlink" title="三 第一步"></a>三 第一步</h2><h3 id="电子元件"><a href="#电子元件" class="headerlink" title="电子元件"></a>电子元件</h3><h4 id="电阻"><a href="#电阻" class="headerlink" title="电阻"></a>电阻</h4><ul><li>电阻阻值读法：  </li><li><em>第一环*</em>：标示阻值的第一个数字  </li><li><em>第二环*</em>：标示阻值的第二个数字  </li><li><em>第三环*</em>：标示倍数（如果共有4环）或第三个数字（共有5环）  </li><li><em>第四环*</em>：一共有5环的倍数  </li><li><em>第五环*</em>：表示误差（精度）  </li><li>电阻色环颜色对应数值  </li><li><em>颜色*</em> —— <strong>欧姆</strong><br>黑色——0<br>棕色——1<br>红色——2<br>橙色——3<br>青色——4<br>绿色——5<br>蓝色——6<br>紫色——7<br>灰色——8<br>白色——9</li></ul><h4 id="发光二极管"><a href="#发光二极管" class="headerlink" title="发光二极管"></a>发光二极管</h4><ul><li>使用LED的过程中要考虑到 LED 的工作电压和电流  </li><li>红色LED一般需要 1.7V 电压和 5~12mA 的电流  </li><li>Arduino 的输出为 5V，以及能输出大的多的电流  </li><li>不太确定的情况下可选择阻值稍大一些的电阻  </li></ul><h4 id="面包板"><a href="#面包板" class="headerlink" title="面包板"></a>面包板</h4><ul><li>使用面包板要明确面包板的插孔内部是如何连接的  </li></ul><h3 id="作品1：做出闪烁的LED波"><a href="#作品1：做出闪烁的LED波" class="headerlink" title="作品1：做出闪烁的LED波"></a>作品1：做出闪烁的LED波</h3><h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><ol><li>点亮 LED 1  </li><li>等待半秒  </li><li>熄灭 LED 1  </li><li>点亮 LED 2  </li><li>等待半秒  </li><li>熄灭 LED 2  </li><li>持续重复上述步骤直至 LED 5 被点亮，然后从 LED 5 做到 LED 1  </li><li>不停地重复  </li></ol><h4 id="元件"><a href="#元件" class="headerlink" title="元件"></a>元件</h4><ul><li>Arduino 和 USB连接线  </li><li>5个 LED  </li><li>5个 560Ω 左右的电阻  </li><li>一块面包板  </li><li>若干连接线  </li></ul><h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// ArduionWorkshop_Work1_闪烁的LED波</span><span class="token comment" spellcheck="true">// ezhq_16/11/25</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">pinMode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置数字引脚2~6为输出</span>  <span class="token function">pinMode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">pinMode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">pinMode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">pinMode</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//点亮 LED 1</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//等待半秒</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>LOW<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//熄灭 LED 1</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//按同样规律点亮剩余LED灯</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">digitalWrite</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>LOW<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//从LED5 开始反向进行</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//程序会从开头循环运行</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="电路"><a href="#电路" class="headerlink" title="电路"></a>电路</h4><h3 id="作品2：用for-循环做重复动作"><a href="#作品2：用for-循环做重复动作" class="headerlink" title="作品2：用for 循环做重复动作"></a>作品2：用for 循环做重复动作</h3><ul><li>作品2中，第二个for循环中，将“a&gt;1”改为“a&gt;2”,会使得最终效果更顺畅自然。  </li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// ArduionWorkshop_Work2_用 for 循环做重复动作</span><span class="token comment" spellcheck="true">// ezhq_16/11/25</span><span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">pinMode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置数字引脚2~6为输出</span>  <span class="token function">pinMode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">pinMode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">pinMode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">pinMode</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> a <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> a <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">;</span> a<span class="token operator">--</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用脉冲宽度调制变化LED的亮度"><a href="#用脉冲宽度调制变化LED的亮度" class="headerlink" title="用脉冲宽度调制变化LED的亮度"></a>用脉冲宽度调制变化LED的亮度</h3><ul><li>PWM(Pulse Width Modulation)脉冲宽度调制/脉宽调制  </li><li>Aruino 的 PWM 大约每秒500次的速度切换 LED 亮灭来形成各种来形成各种亮度  </li><li>亮度的变化由数字输出引脚输出高电平的时间和低电平的时间的比值不同来实现（占空比）  </li><li>产生 PWM 信号，所用函数为analogWrite(x, y), x 为数字引脚编号；y 为占空比的比值，范围为 0~255，255 表示 100% 占空比。  </li></ul><h3 id="作品3：演示PWM"><a href="#作品3：演示PWM" class="headerlink" title="作品3：演示PWM"></a>作品3：演示PWM</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// ArduionWorkshop_Work3_演示PWM</span><span class="token comment" spellcheck="true">// ezhq_16/11/25</span><span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">pinMode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// LED 控制引脚3，3是具有带有 PWM 功能的引脚</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span> a <span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> a<span class="token operator">--</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">delay</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更多的电子元件"><a href="#更多的电子元件" class="headerlink" title="更多的电子元件"></a>更多的电子元件</h3><h4 id="晶体管"><a href="#晶体管" class="headerlink" title="晶体管"></a>晶体管</h4><ul><li>使用晶体管一定要确定晶体管的管脚排列，正确连接管脚  </li></ul><h4 id="整流二极管"><a href="#整流二极管" class="headerlink" title="整流二极管"></a>整流二极管</h4><ul><li>整流二极管的负极为标有黑色环的一端    </li></ul><h4 id="继电器"><a href="#继电器" class="headerlink" title="继电器"></a>继电器</h4><h3 id="高压电路"><a href="#高压电路" class="headerlink" title="高压电路"></a>高压电路</h3><ul><li>高压电路注意保护电路的安排，以免损害设备器件  </li></ul><hr><h2 id="四-构建模块"><a href="#四-构建模块" class="headerlink" title="四 构建模块"></a>四 构建模块</h2><h3 id="电容"><a href="#电容" class="headerlink" title="电容"></a>电容</h3><h4 id="数字输入"><a href="#数字输入" class="headerlink" title="数字输入"></a>数字输入</h4><ul><li>使用开关时要注意开关抖动现象的存在并对此情况进行考虑  </li></ul><h3 id="作品4：演示数字输入"><a href="#作品4：演示数字输入" class="headerlink" title="作品4：演示数字输入"></a>作品4：演示数字输入</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// ArduionWorkshop_Work4_演示数字输入</span><span class="token comment" spellcheck="true">// ezhq_17/01/11</span><span class="token comment" spellcheck="true">// 注：若没有电容，可以直接在开关输出引脚处直接外加一个220R的电阻到GND</span><span class="token macro property">#<span class="token directive keyword">define</span> LED 12</span><span class="token macro property">#<span class="token directive keyword">define</span> BUTTON 7</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">pinMode</span><span class="token punctuation">(</span>LED<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">pinMode</span><span class="token punctuation">(</span>BUTTON<span class="token punctuation">,</span> INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">digitalRead</span><span class="token punctuation">(</span>BUTTON<span class="token punctuation">)</span> <span class="token operator">==</span> HIGH<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>LED<span class="token punctuation">,</span>HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>LED<span class="token punctuation">,</span>LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注：若没有电容，可以直接在开关输出引脚处直接外加一个220R的电阻到GND实现去除抖动的作用  </li></ul><h2 id="五-使用函数"><a href="#五-使用函数" class="headerlink" title="五 使用函数"></a>五 使用函数</h2><h2 id="六-数字、变量和算术"><a href="#六-数字、变量和算术" class="headerlink" title="六 数字、变量和算术"></a>六 数字、变量和算术</h2><h2 id="七-液晶显示器"><a href="#七-液晶显示器" class="headerlink" title="七 液晶显示器"></a>七 液晶显示器</h2><h2 id="八-扩展-Arduino"><a href="#八-扩展-Arduino" class="headerlink" title="八 扩展 Arduino"></a>八 扩展 Arduino</h2><h2 id="九-数字键盘"><a href="#九-数字键盘" class="headerlink" title="九 数字键盘"></a>九 数字键盘</h2><h2 id="十-用触摸屏获得用户输入"><a href="#十-用触摸屏获得用户输入" class="headerlink" title="十 用触摸屏获得用户输入"></a>十 用触摸屏获得用户输入</h2><h2 id="十一-认识-Arduino-系列"><a href="#十一-认识-Arduino-系列" class="headerlink" title="十一 认识 Arduino 系列"></a>十一 认识 Arduino 系列</h2><h2 id="十二-电机和运动"><a href="#十二-电机和运动" class="headerlink" title="十二 电机和运动"></a>十二 电机和运动</h2><h2 id="十三-用-Arduino-接-GPS"><a href="#十三-用-Arduino-接-GPS" class="headerlink" title="十三 用 Arduino 接 GPS"></a>十三 用 Arduino 接 GPS</h2><h2 id="十四-无线数据通信"><a href="#十四-无线数据通信" class="headerlink" title="十四 无线数据通信"></a>十四 无线数据通信</h2><h2 id="十五-红外遥控"><a href="#十五-红外遥控" class="headerlink" title="十五 红外遥控"></a>十五 红外遥控</h2><h2 id="十六-读RFID-标签"><a href="#十六-读RFID-标签" class="headerlink" title="十六 读RFID 标签"></a>十六 读RFID 标签</h2><h2 id="十七-数据总线"><a href="#十七-数据总线" class="headerlink" title="十七 数据总线"></a>十七 数据总线</h2><h2 id="十八-真实时钟"><a href="#十八-真实时钟" class="headerlink" title="十八 真实时钟"></a>十八 真实时钟</h2><h2 id="十九-互联网"><a href="#十九-互联网" class="headerlink" title="十九 互联网"></a>十九 互联网</h2><h2 id="二十-手机通信"><a href="#二十-手机通信" class="headerlink" title="二十 手机通信"></a>二十 手机通信</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Read </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Arduino </tag>
            
            <tag> Read </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows系统Hosts修改</title>
      <link href="cn/2016111730/"/>
      <url>cn/2016111730/</url>
      
        <content type="html"><![CDATA[<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>本教程不提供任何hosts文件，也不提供任何翻墙之类的软件或文件，相关文件自行网络搜索，使用之前请自行确保文件的安全性，本教程不对此方法的后果负责。  </p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>只要一碰到无法正常浏览网络，正常使用Google、twitter、facebook等国外网站，搜索相关解决方法，都会在网上搜索到一种名为“修改系统hosts文件”的方法。到底如何操作，如何进行相关系统文件的更改？本文段即对此操作流程进行说明。废话不多所，开始教程。  </p><h2 id="需要文件"><a href="#需要文件" class="headerlink" title="需要文件"></a>需要文件</h2><ul><li>网络寻找好的hosts（自行google或百度相关站点搜索下载）。  </li></ul><h2 id="本地hosts文件复制"><a href="#本地hosts文件复制" class="headerlink" title="本地hosts文件复制"></a>本地hosts文件复制</h2><h3 id="本地文件准备"><a href="#本地文件准备" class="headerlink" title="本地文件准备"></a>本地文件准备</h3><p>将本地电脑的hosts文件复制到桌面，准备进行下一步的编辑。<br>hosts文件位于本地电脑的位置：C:\Windows\System32\drivers\etc ，在这个etc文件夹内，有个没有后缀名的hosts文件，将它复制到桌面一份。不要急着将这个窗口关闭，后续要用到。  </p><h3 id="下载文件的编辑"><a href="#下载文件的编辑" class="headerlink" title="下载文件的编辑"></a>下载文件的编辑</h3><p>将下载的hosts文件打开，打开方式选择记事本（右键——打开方式——记事本），在打开的记事本中，找到 # Modified hosts start 这一行，从此行#号前面开始到最后结尾处，选中这一部分进行复制（在#号前面点一下鼠标，拖动右侧滑块到最下方，然后按住键盘Shift按键不放，同时在最后一个字母处点击鼠标左键，即可选中这一部分，然后直接松开Shift，并随后同时按下Ctrl和C两个按键，即可完成复制）。  </p><h3 id="本地文件的编辑"><a href="#本地文件的编辑" class="headerlink" title="本地文件的编辑"></a>本地文件的编辑</h3><p>将复制到桌面的hosts文件打开，打开方式选择记事本，在文档最后面另起一行（为了以后更改此处文件方便，可以另起一行后输入十来个#号，然后另起一行再输入十来个#号，最后再另起一行准备下一步操作。这些符号会被系统自动忽略，但是可以让自己以后便于寻找位置。）对上一步复制的文段进行粘贴（同时按下键盘Ctrl和V两个按键）然后直接对此文件进行保存（不要修改文件名，弹出文件重名的话，选择替换）。  </p><h3 id="使修改后的本地文件生效"><a href="#使修改后的本地文件生效" class="headerlink" title="使修改后的本地文件生效"></a>使修改后的本地文件生效</h3><p>第3步中已经将原先的hosts文件修改了。接下来，直接将修改后的hosts文件拖到第1步中的etc文件夹中，若有“替换或跳过文件”的提示，则选择“替换目标中的文件”，若有“你需要提供管理员权限才能移动到此文件夹”的提示，则选择继续即可。然后即可正常访问相关网站。  </p><h3 id="扫尾工作"><a href="#扫尾工作" class="headerlink" title="扫尾工作"></a>扫尾工作</h3><p>第1步中的文件窗口可以关闭，网上下载的hosts文件可以直接删除了。更改hosts文件至此结束。  </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C Primer Plus 5th</title>
      <link href="cn/2016102207/"/>
      <url>cn/2016102207/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章-初识C语言"><a href="#第一章-初识C语言" class="headerlink" title="第一章 初识C语言"></a>第一章 初识C语言</h2><p><strong>章节内容</strong>  </p><ul><li>C的历史和特性  </li><li>编写程序所需的步骤  </li><li>关于编译器和链接器的一些知识  </li><li>C的标准  </li></ul><h3 id="1-1-C语言的起源"><a href="#1-1-C语言的起源" class="headerlink" title="1.1 C语言的起源"></a>1.1 C语言的起源</h3><ul><li>编程语言的目标具有一定的参考意义，可以明白为何采用它。  </li></ul><h3 id="1-2-使用C语言的理由"><a href="#1-2-使用C语言的理由" class="headerlink" title="1.2 使用C语言的理由"></a>1.2 使用C语言的理由</h3><ul><li>C语言的特性：控制结构、快速、紧凑、可移植、自由度高。  </li></ul><h3 id="1-3-C语言的应用范围"><a href="#1-3-C语言的应用范围" class="headerlink" title="1.3 C语言的应用范围"></a>1.3 C语言的应用范围</h3><h3 id="1-4-计算机能做什么"><a href="#1-4-计算机能做什么" class="headerlink" title="1.4 计算机能做什么"></a>1.4 计算机能做什么</h3><ul><li><strong>计算机基本组成</strong><br>中央处理单元CPU（Central Processing Unit）：负责绝大多数计算机的计算工作。<br>随机访问存储器RAM（Random Access Memory）：保存运行的程序和文件，与CPU直接诶交换数据。<br>永久存储器：保存计算机数据。<br>外围设备：键盘、鼠标、显示器等等，提供人与计算机的交互通信。  </li><li><em>编译器*</em><br>表层过程中高级指令可以使编程者更加便捷的表达，但计算机不易理解这些指令。编译器将高级语言程序解释为计算机需要的详细的低级程序指令，使得编程者可以自在思考并表达想法，并将想法写成的高级语言指令翻译为供计算机执行的一系列低级命令。编译器还可以将一份程序转换为适应各种不同机器的指令，使得编程只需一次。  </li></ul><h3 id="1-5-高级计算机语言和编译器"><a href="#1-5-高级计算机语言和编译器" class="headerlink" title="1.5 高级计算机语言和编译器"></a>1.5 高级计算机语言和编译器</h3><h3 id="1-6-语言标准"><a href="#1-6-语言标准" class="headerlink" title="1.6 语言标准"></a>1.6 语言标准</h3><h3 id="1-7-使用C语言的7个步骤"><a href="#1-7-使用C语言的7个步骤" class="headerlink" title="1.7 使用C语言的7个步骤"></a>1.7 使用C语言的7个步骤</h3><ul><li>步骤并非是从初到末的，而是循环往复或不断变化的。编程步骤1、2比较重要，不能忽视。编写代码应尽量先进行规划，这将节省不少后续时间。  </li></ul><ol><li>定义程序目标<br>明确编程目标，对程序完成的事情有概念性的认识：希望通过编程对计算机提供什么资料，计算机需要进行何种处理，计算机输出什么结果。在此阶段不需要考虑具体的程序语法和程序代码。  </li><li>设计程序<br>思考程序矩体实现方法，呈现方式，预估程序编写时间。编写伪代码。  </li><li>编写代码<br>编写代码。注意编程规范性，适当添加注释。  </li><li>编译<br>运行编译器，将代码进行编译操作，并进行错误改正以及代码改善。  </li><li>运行程序<br>对编译通过的程序进行运行。  </li><li>测试和调试程序<br>对程序进行多种情况下的测试，尽可能发现程序缺陷或错误（Bug）检查程序是否能正常运行并达到预期目标。对错误情况进行调试（Debugging）。  </li><li>维护和修改程序<br>对程序后期使用进行故障修复、功能改善、功能添加等操作。  </li></ol><h3 id="1-8-编程机制"><a href="#1-8-编程机制" class="headerlink" title="1.8 编程机制"></a>1.8 编程机制</h3><ul><li><p>文件名组成：基本名.扩展名  </p></li><li><p><strong>编译器与链接器</strong><br>C编程编写的源代码需要转换为可执行文件（机器语言代码）后才能运行，分两部来完成：编译和链接，分别用到编译器和链接器。  </p></li><li><p><em>编译器*</em>：将编写的各个源代码文件转换为中间代码（此时还不是最终执行的机器代码，仅仅是自己编写的代码相对应的机器代码，也称为目标代码），供后续链接器使用。  </p></li><li><p><em>链接器*</em>：将目标代码、系统标准启动代码、程序运行需要的库代码三者结合为一个可执行文件。  </p></li><li><p><em>启动代码*</em>：启动代码作用为连接操作系统与程序之间的接口。将程序需要的操作与操作系统用于实现相关功能的接口对应起来。  </p></li><li><p><em>库代码*</em>：一些基本或高频的C代码并不需要自己编写去实现，C程序库中自带一些相关代码，在程序中直接通过一些短指令来引用。引用语句并不能被机器直接运行，需要链接器在后期从C库中调出相关短指令代表的命令代码，并将短指令替换。</p></li></ul><p><img src="https://res.cloudinary.com/imgcave/image/upload/v1592707827/Img/BlogCover/1_1_bianyiqi_n4saur.jpg" alt="编译器和链接器"> </p><ul><li><p>源代码文件应该是文本文件，不是字处理文件（字处理文件类似于word文件，除了文件本身包含的文字外，还包含许多字体颜色和格式等信息，不是纯文本文件）。</p></li><li><p>实际编程中易出现的一个问题：程序运行窗口在程序命令运行完之后瞬间消失。<br>解决方法：在程序命令里的return语句之前添加如下一行代码</p><pre class="line-numbers language-c"><code class="language-c"><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该命令作用为读取一次键盘按键输入，效果为程序运行到此处时候只有按下回车键（Enter键）才继续运行。假若程序中此处已经有需要输入内容并等待回车的命令，则可以连续两次使用该代码</p><pre class="line-numbers language-c"><code class="language-c"><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>该重复一次的代码段意为先根据第一次按下的回车键来读取输入的数据，然后按第二行命令等待按下回车键来继续运行程序。（对于入门者此处无需过于理解，入门后自然明白）。  </p></li></ul><h3 id="1-9-本书的组织结构"><a href="#1-9-本书的组织结构" class="headerlink" title="1.9 本书的组织结构"></a>1.9 本书的组织结构</h3><h3 id="1-10-本书的约定"><a href="#1-10-本书的约定" class="headerlink" title="1.10 本书的约定"></a>1.10 本书的约定</h3><h3 id="1-11-本章小结"><a href="#1-11-本章小结" class="headerlink" title="1.11 本章小结"></a>1.11 本章小结</h3><h3 id="1-12-复习题"><a href="#1-12-复习题" class="headerlink" title="1.12 复习题"></a>1.12 复习题</h3><ol><li><p><strong>就编程而言，可移植性表示什么？</strong><br>一个程序的可移植性好，就是指它的源代码不经修改就可以在多种不同的计算机系统上编译成可以成功运行的程序。  </p></li><li><p><strong>解释源代码文件、目标代码文件和可执行文件之间的区别。</strong><br>源代码文件中包含着程序员使用任何语言编写的代码。<br>目标代码文件包含着机器语言代码，它并不需要是完整的程序代码。<br>可执行文件包含着组成可执行程序的全部机器语言代码。  </p></li><li><p><strong>编程的7个主要步骤是什么？</strong><br>a.定义程序目标;<br>b.编写程序代码;<br>c.编写程序代码;<br>d.编译程序;<br>e.运行程序;<br>f.测试和调试程序;<br>g.维护和修改程序;  </p></li><li><p><strong>编译器的任务是什么？</strong><br>编译器把源代码（例如，用C语言写成的代码）转换成机器语言代码，也称对象代码。  </p></li><li><p><strong>链接器的任务是什么？</strong><br>链接器把多个来源（例如，已编译的的源代码、库代码和启动代码）的目标代码连接成一个单独的可执行程序。  </p></li></ol><h3 id="1-13-编程练习"><a href="#1-13-编程练习" class="headerlink" title="1.13 编程练习"></a>1.13 编程练习</h3><ol><li>您刚刚被MacroMuscle有限公司（Software for Hard Bodies）聘用。该公司要进入欧洲市场，需要一个将英寸转换为厘米（1英寸=2.54cm）的程序。他们希望建立的该程序可提示用户输入英寸值。您的任务是定义程序目标并设计该程序（编程过程的第1步和第2步）。</li></ol><h2 id="第二章-C语言概述"><a href="#第二章-C语言概述" class="headerlink" title="第二章 C语言概述"></a>第二章 C语言概述</h2><p><strong>章节内容</strong>    </p><ul><li>运算符=  </li><li>函数：main()、printf()  </li><li>编写一个简单的C程序  </li><li>创建整型变量，为其赋值，并在屏幕上显示该值  </li><li>换行字符  </li><li>如何在程序中加入注释，建立包含多个函数的程序，以及造出程序中的错误  </li><li>理解什么是关键字  </li></ul><h3 id="2-1-简单的C程序示例"><a href="#2-1-简单的C程序示例" class="headerlink" title="2.1 简单的C程序示例"></a>2.1 简单的C程序示例</h3><ul><li><p>经典程序例子及解析  </p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//简单C程序例子</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> num<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//定义名为num的一个变量</span>  num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将num赋值为1</span>  <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"I am a simple "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用函数printf()输出内容</span>  <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"computer.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"My favorite number is %d because it is first.\n"</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-示例解释"><a href="#2-2-示例解释" class="headerlink" title="2.2 示例解释"></a>2.2 示例解释</h3></li><li><p>C程序的各个部分及简要介绍<br><img src="https://res.cloudinary.com/imgcave/image/upload/v1592715767/Img/BlogCover/2_1_Cjiegou_ecabxn.jpg" alt="C程序结构图解"></p></li><li><p>告诉编译器编译时包含stdio.h文件的所有内容（此文件对一些C语言的基本功能如输入接受和输出显示提供支持，这些功能的实现并不需要自己亲自编写）。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>  </span><span class="token comment" spellcheck="true">//包含另一个文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>对函数进行定义，C语言包含至少一个函数，上面的函数为其中比较基本的函数。格式：int是函数类型（函数有多种不同的类型，此处为整数类型函数。）；main()是函数的名字；main()括号中的void为函数接收值（函数运行时可以接受特定输入，void代表此函数不需要输入值。）</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//函数名</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>这是注释，注释的作用是对代码做一定说明，对于机器没有任何意义，在编译的时候也会被机器全部忽略，只是为了日后查看代码或他人阅读代码的时候容易理解而建立。注释有两种，一种为行注释，一种为块注释。行注释用于简短的，一行或一行不到的注释使用，可以放在任意位置，在一行中，双斜线之后的所有内容均被认为是注释。对于块注释，结构由/<em>和</em>/组成，两者之间的所有内容无论几行，都被认为是注释。第二段代码为两种注释的例子(块注释代码显示效果有问题，代码是正确的)。</p><pre class="line-numbers language-c"><code class="language-c">  <span class="token comment" spellcheck="true">// 简单C程序例子</span>  <span class="token comment" spellcheck="true">//行注释</span>  <span class="token comment" spellcheck="true">/*  块注释  */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-3-简单程序的结构"><a href="#2-3-简单程序的结构" class="headerlink" title="2.3 简单程序的结构"></a>2.3 简单程序的结构</h3><h3 id="2-4-提高程序可读性的技巧"><a href="#2-4-提高程序可读性的技巧" class="headerlink" title="2.4 提高程序可读性的技巧"></a>2.4 提高程序可读性的技巧</h3><h3 id="2-5-进一步使用C"><a href="#2-5-进一步使用C" class="headerlink" title="2.5 进一步使用C"></a>2.5 进一步使用C</h3><h3 id="2-6-多个函数"><a href="#2-6-多个函数" class="headerlink" title="2.6 多个函数"></a>2.6 多个函数</h3><h3 id="2-7-调试程序"><a href="#2-7-调试程序" class="headerlink" title="2.7 调试程序"></a>2.7 调试程序</h3><ul><li>对于编译器给出的错误提示，不必全部更改后再运行，可以先修改为首的几个，尝试运行后再决定是否继续修改。  </li><li>编译器给出的错误位置一般要比真正的错误位置滞后一行。  </li><li>编译器基本无法检测出语义错误。  </li><li>可以通过在关键点处加入而外的printf()语句来查找语句错误，解决错误之后再删除相关测试用printf()语句。  </li><li>把关键字或保留标识符用作变量名将会引起编译器报错。  </li></ul><h3 id="2-11-复习题"><a href="#2-11-复习题" class="headerlink" title="2.11 复习题"></a>2.11 复习题</h3><ol><li>如何称呼C程序的基本模块？  </li></ol><ol start="2"><li><p>什么是语法错误？给出它的一个英语例子和C语言例子。  </p></li><li><p>什么是语义错误？给出它的一个英语例子和一个C语言例子。  </p></li><li><p>Indiana Sloth已经编好了下面的程序，并想征求您的意见。请帮助他评定。</p><pre class="line-numbers language-c"><code class="language-c"> include studio<span class="token punctuation">.</span>h <span class="token keyword">int</span> main<span class="token punctuation">{</span><span class="token keyword">void</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">*</span> 改程序可显示出一年中有多少周 <span class="token operator">/</span><span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> s s<span class="token punctuation">:</span> <span class="token operator">=</span> <span class="token number">56</span><span class="token punctuation">:</span> <span class="token function">print</span> <span class="token punctuation">(</span>Tere are s weeks in a year<span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>假设下面的每一个例子都是某个完整程序的一部分，它们每个将输出什么结果？</p><pre class="line-numbers language-c"><code class="language-c"> a<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Baa Baa Black Sheep."</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Have you any wool?\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> b<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Begone! \nO vreature of lard!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> c<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"What?\nNo/nBonzo?\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> d<span class="token punctuation">.</span><span class="token keyword">int</span> num<span class="token punctuation">;</span> num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d + %d = Td"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num<span class="token punctuation">,</span> num<span class="token punctuation">,</span> num <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>下面哪几个是C的关键字？main,int,function,char,=  </p></li><li><p>如何以下面的格式输出words和lines的值：”There were 3020 words and 350 lines”？这里，3020和350代表两个变量的值。  </p></li><li><p>考虑下面的程序：  </p><pre class="line-numbers language-c"><code class="language-c"> <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;studio.h></span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 第7行 */</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 第8行 */</span> a <span class="token operator">=</span> b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 第9行 */</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 请问在第7行、第8行和第9行之后程序的状态分别是什么？  </p></li></ol><h3 id="2-12-编程练习"><a href="#2-12-编程练习" class="headerlink" title="2.12 编程练习"></a>2.12 编程练习</h3><ol><li><p>编写一个程序，调用printf()函数在一行上输出您的名和姓，再调用一次printf()函数在两个单独的行上输出您的名和姓，然后调用一对printf()函数在一行上输出您的名和姓。输出应如下所示（内容可换为自己的名和姓）  </p><pre class="line-numbers language-c"><code class="language-c">Anton BrucknerAntonBrucknerAnton Bruckner<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写一个程序输出您的姓名和地址  </p></li><li><p>编写一个程序，把您的年龄转换成天数并显示二者的值。不用考虑平年（fractional year）和闰年（leap year）的问题。</p></li><li><p>编写一个能够产生下面输出的程序：  </p><pre class="line-numbers language-c"><code class="language-c">For he's a jolly good fellow！For he's a jolly good fellow<span class="token operator">!</span>For he's a jolly good fellow<span class="token operator">!</span>Which nobody can deny<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>程序中除了main()函数之外，要使用两个用户定义的函数：一个用于把上面的夸奖消息输出一次；另一个用于把最后一行输出一次。</p></li><li><p>编写一个程序，创建一个名为toes的整数变量。让程序把toes设置为10，再让程序计算两个toes的和以及toes的平方。程序应该输出所有的3个值，并分别标识它们。</p></li><li><p>编写一个能够产生下列输出的程序：</p><pre class="line-numbers language-c"><code class="language-c">Smile<span class="token operator">!</span>Smile<span class="token operator">!</span>Smile<span class="token operator">!</span>Smile<span class="token operator">!</span>Smile<span class="token operator">!</span>Smile<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在程序中定义一个能显示字符串Smile!一次的函数，并在需要时使用该函数。  </p></li><li><p>编写一个程序，程序中要调用名为one_three()的函数。该函数要在一行中显示单词“one”，再调用two()函数，然后再在另一行中显示单词“three”。函数two()应该能在一行中显示单词“two”。main()函数应该在调用one_three()函数之前 显示短语“starting now:”,函数调用之后要显示“done!”。这样，最后的输出结果应该如下所示：</p><pre class="line-numbers language-c"><code class="language-c">starting now<span class="token operator">!</span>onetwothreedone<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="第三章-数据和C"><a href="#第三章-数据和C" class="headerlink" title="第三章 数据和C"></a>第三章 数据和C</h2><p><strong>章节内容</strong>    </p><ul><li>关键字：int, short, long, unsigned, char, float, double, _Bool, _Complex, _Imaginary  </li><li>运算符：sizeof  </li><li>函数：scanf()  </li><li>C使用的基本数据类型  </li><li>整数类型和浮点数类型的区别  </li><li>对上述类型，如何书写常量和声明变量  </li><li>使用printf()和scanf()函数读写各种类型数据的值  </li></ul><h3 id="3-1-示例程序"><a href="#3-1-示例程序" class="headerlink" title="3.1 示例程序"></a>3.1 示例程序</h3><ul><li>错误和警告：编译过程中错误消息标明程序中存在错误，不能对其进行编译。警告则表明尽管代码正确但有可能不是程序员所要的。警告不终止编译过程。  <h3 id="3-4-C数据类型"><a href="#3-4-C数据类型" class="headerlink" title="3.4 C数据类型"></a>3.4 C数据类型</h3><h4 id="总结：基本数据类型"><a href="#总结：基本数据类型" class="headerlink" title="总结：基本数据类型"></a>总结：基本数据类型</h4></li><li>关键字：基本数据类型使用11个关键字：int、long、short、unsigned、char、float、double、signed、_Bool、_Complex和_Imaginary。</li></ul><h2 id="第四章-字符串和格式化输入-输出"><a href="#第四章-字符串和格式化输入-输出" class="headerlink" title="第四章 字符串和格式化输入/输出"></a>第四章 字符串和格式化输入/输出</h2><h2 id="第五章-运算符、表达式和语句"><a href="#第五章-运算符、表达式和语句" class="headerlink" title="第五章 运算符、表达式和语句"></a>第五章 运算符、表达式和语句</h2><h2 id="第六章-C控制语句：循环"><a href="#第六章-C控制语句：循环" class="headerlink" title="第六章 C控制语句：循环"></a>第六章 C控制语句：循环</h2><h2 id="第七章-C控制语句：分支和跳转"><a href="#第七章-C控制语句：分支和跳转" class="headerlink" title="第七章 C控制语句：分支和跳转"></a>第七章 C控制语句：分支和跳转</h2><h2 id="第八章-字符输入-输出和输入确认"><a href="#第八章-字符输入-输出和输入确认" class="headerlink" title="第八章 字符输入/输出和输入确认"></a>第八章 字符输入/输出和输入确认</h2><h2 id="第九章-函数"><a href="#第九章-函数" class="headerlink" title="第九章 函数"></a>第九章 函数</h2><h2 id="第十章-数组和指针"><a href="#第十章-数组和指针" class="headerlink" title="第十章 数组和指针"></a>第十章 数组和指针</h2><h2 id="第十一章-字符串和字符串函数"><a href="#第十一章-字符串和字符串函数" class="headerlink" title="第十一章 字符串和字符串函数"></a>第十一章 字符串和字符串函数</h2><h2 id="第十二章-存储类、链接和内存管理"><a href="#第十二章-存储类、链接和内存管理" class="headerlink" title="第十二章 存储类、链接和内存管理"></a>第十二章 存储类、链接和内存管理</h2><h2 id="第十三章-文件输入-输出"><a href="#第十三章-文件输入-输出" class="headerlink" title="第十三章 文件输入/输出"></a>第十三章 文件输入/输出</h2><h2 id="第十四章-结构和其他数据形式"><a href="#第十四章-结构和其他数据形式" class="headerlink" title="第十四章 结构和其他数据形式"></a>第十四章 结构和其他数据形式</h2><h2 id="第十五章-位操作"><a href="#第十五章-位操作" class="headerlink" title="第十五章 位操作"></a>第十五章 位操作</h2><h2 id="第十六章-C预处理器和C库"><a href="#第十六章-C预处理器和C库" class="headerlink" title="第十六章 C预处理器和C库"></a>第十六章 C预处理器和C库</h2><h2 id="第十七章-高级数据表示"><a href="#第十七章-高级数据表示" class="headerlink" title="第十七章 高级数据表示"></a>第十七章 高级数据表示</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Read </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Read </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>联系的讨好</title>
      <link href="cn/2016102213/"/>
      <url>cn/2016102213/</url>
      
        <content type="html"><![CDATA[<p>一切烦恼<br>源于越来越多的“联系”<br>拥有了紧跟潮流的“聊天工具”<br>失去的是以往倍感珍惜的共同时间<br>得到了随时发送的机会，<br>藐视了言语力量的摧残；<br>得到了越来越多的途经，<br>丧失了逐渐稀有的认真。<br>随风而逝的，<br>是时间、<br>是认真、<br>是珍惜、<br>是思考力。<br>喜好是用来表达的，<br>而不是用来讨好的；<br>一切以讨好为目的喜好，<br>终将拖垮一个人的心智。  </p><hr><ul><li><a href="http://music.163.com/#/m/song?id=3405280&amp;userid=42561239" target="_blank" rel="noopener">网易云音乐：《Better off Alone》——Sissel</a><br><img src="https://res.cloudinary.com/imgcave/image/upload/v1592746030/Img/BlogCover/AllGoodThings_gwgatx.jpg" alt="Better off Alone">  </li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音乐如生活</title>
      <link href="cn/2016102209/"/>
      <url>cn/2016102209/</url>
      
        <content type="html"><![CDATA[<p>某种程度上<br>音乐颇具私人性质<br>没有不好听的音乐<br>只有不爱听的音乐  </p><p>听音乐的快餐化、浅显化<br>使得每个人都成了<br>“音乐评论人”  </p><p>大神歌单<br>百度百科<br>神级评论<br>……<br>都在无下限地拉低<br>拉低<br>继续拉低<br>音乐的正式感  </p><p>静心独听<br>乐队背景<br>音乐风格发展<br>Wikipedia的专业介绍<br>……<br>逐渐探索<br>了解音乐  </p><p>而后才能<br>在某个夜晚<br>或心灰意冷<br>或寂寞难耐<br>或平心静气<br>或欣喜若狂<br>或……<br>与某首音乐<br>产生心灵的<br>碰撞<br>引发<br>无穷共鸣  </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB 闰年判断与闰年输出</title>
      <link href="cn/2016091200/"/>
      <url>cn/2016091200/</url>
      
        <content type="html"><![CDATA[<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><a href="https://res.cloudinary.com/imgcave/raw/upload/v1592660511/Img/BlogCover/RunNian_ezhq_avsjgh.m" target="_blank" rel="noopener">下列代码仅供参考</a>  </p><pre class="line-numbers language-matlab"><code class="language-matlab"><span class="token comment" spellcheck="true">%RunNian1900-2016_ezhq</span><span class="token keyword">function</span> leapyear<span class="token keyword">for</span> year <span class="token operator">=</span> <span class="token number">1900</span><span class="token operator">:</span><span class="token number">2016</span>  sign <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  a <span class="token operator">=</span> <span class="token function">rem</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  b <span class="token operator">=</span> <span class="token function">rem</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  c <span class="token operator">=</span> <span class="token function">rem</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">0</span>    sign <span class="token operator">=</span> sign <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">end</span>  <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token number">0</span>    sign <span class="token operator">=</span> sign <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">end</span>  <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token number">0</span>    sign <span class="token operator">=</span> sign <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">end</span>  <span class="token keyword">if</span> sign <span class="token operator">==</span> <span class="token number">1</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'%4d \n'</span><span class="token punctuation">,</span>year<span class="token punctuation">)</span>  <span class="token keyword">end</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>运行结果截图<br><img src="https://res.cloudinary.com/imgcave/image/upload/v1592660504/Img/BlogCover/RunNian_ezhq_c2mv6d.jpg" alt="运行结果截图"> </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三维作品 2016</title>
      <link href="cn/2016082210/"/>
      <url>cn/2016082210/</url>
      
        <content type="html"><![CDATA[<h1 id="棋局斑马球·棋局未定，世事无常"><a href="#棋局斑马球·棋局未定，世事无常" class="headerlink" title="棋局斑马球·棋局未定，世事无常"></a>棋局斑马球·棋局未定，世事无常</h1><p><img src="https://res.cloudinary.com/imgcave/image/upload/v1592731078/Img/BlogCover/3D_2016B_8_1_%E6%A3%8B%E5%B1%80%E6%96%91%E9%A9%AC%E7%90%83_qd21l5.jpg" alt="棋局斑马球">  </p><h1 id="银河之光·心有世界，映射万物"><a href="#银河之光·心有世界，映射万物" class="headerlink" title="银河之光·心有世界，映射万物"></a>银河之光·心有世界，映射万物</h1><p><img src="https://res.cloudinary.com/imgcave/image/upload/v1592731012/Img/BlogCover/3D_2016A_6_3_%E9%93%B61_cwbdru.jpg" alt="银河之光">  </p><h1 id="静语·每个人、每件事物，都如艺术，静语相遇，共鸣知己"><a href="#静语·每个人、每件事物，都如艺术，静语相遇，共鸣知己" class="headerlink" title="静语·每个人、每件事物，都如艺术，静语相遇，共鸣知己"></a>静语·每个人、每件事物，都如艺术，静语相遇，共鸣知己</h1><p><img src="https://res.cloudinary.com/imgcave/image/upload/v1592730993/Img/BlogCover/3D_2016A_6_2_%E9%9D%99%E8%AF%AD_lkur5p.jpg" alt="静语">  </p><h1 id="切刀矩体·横看成岭侧成峰，自有风格，别具一格"><a href="#切刀矩体·横看成岭侧成峰，自有风格，别具一格" class="headerlink" title="切刀矩体·横看成岭侧成峰，自有风格，别具一格"></a>切刀矩体·横看成岭侧成峰，自有风格，别具一格</h1><p><img src="https://res.cloudinary.com/imgcave/image/upload/v1592730965/Img/BlogCover/3D_2016A_6_1_%E5%88%87%E5%88%80%E7%9F%A9%E4%BD%93_qued5f.png" alt="切刀矩体">  </p><h1 id="几何静物·初期的接触，是新鲜的、基本的"><a href="#几何静物·初期的接触，是新鲜的、基本的" class="headerlink" title="几何静物·初期的接触，是新鲜的、基本的"></a>几何静物·初期的接触，是新鲜的、基本的</h1><p><img src="https://res.cloudinary.com/imgcave/image/upload/v1592730926/Img/BlogCover/3D_2016A_5_1_%E5%87%A0%E4%BD%95%E9%9D%99%E7%89%A9_svbk7l.jpg" alt="几何静物">  </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 3D </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3D </tag>
            
            <tag> C4D </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一笔</title>
      <link href="cn/2016081304/"/>
      <url>cn/2016081304/</url>
      
        <content type="html"><![CDATA[<blockquote><p>千山万岭独行，<br>千军万马不惊，<br>千招万式精炼，<br>千万事件小灵。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你是否错过世界的精彩</title>
      <link href="cn/2013011211/"/>
      <url>cn/2013011211/</url>
      
        <content type="html"><![CDATA[<p>你是否跟丹麦网友报名参加同一个在线公益活动？你是否跟印度网友讨论某一热门视频？你是否早早成为各国总统的微博粉丝？你是否为了国际化的工作机会而精心经营你的英文职业人脉主页？你是否关注过坦桑尼亚摄影家的图片社交账号？</p><p>好吧，当你身处和他们不一样的世界，你仍然可以觉得舒适。你看到的评论绝大部分来自观念和角度相似的本国民众，你听到的信息早就被过滤了杂音，甚至你不会感到残缺，因为你的电视里仍有引自韩国的娱乐节目，你的微博里关注了日本空姐，你可以登录中国版的 Facebook，看到那些心灵鸡汤文字以“哈弗大学校训”的名义广为传播。</p><p>你好像已经跟世界接轨，实际上你只是躺在一个“二手货集散场”。有那么一些信息贩子和企业掮客，号称一直在模仿，从未被超越，据此壮大而且赢得你的喜爱。我们被困在厚厚的信息围墙之中，不需要甚至不被允许去参与更广阔世界的竞争，仅靠模仿、专卖、来料加工、信息“走私”就能活下去。</p><p>你很难知道自己失去和错过了哪些精彩。一些在线协作平台，为无数国际团队刷新了便捷办公的记录，而你根本没想过可以这样信息化地工作；一些出色的互联网机构重构了全世界民众的交际圈，而你和你的朋友已然缺席；世界的热点用几分钟传遍地球村，而你在自己的信息孤岛中，刷着无聊的几个娱乐化炒作，纳闷为什么没人关系重大议题。也许你也不再热衷于历经千辛万苦登陆“他们的世界”，因为你的身边好友全都不在那中间；你卸载了蜻蜓电台APP，因为一些外国资讯已经替换成音乐频道。世界一日千里，而你在醉生梦死、固步自封、自娱自乐。你不参与国际热点，你落后于信息化前沿，你跟国外民众缺乏交流，你既不被人理解，也很难理解别人。</p><p>也许你已感觉到，不少人内心很矛盾。一方面说着不惧开放，一方面又不敢拥抱全世界。许多人活在温室之中，成为孱弱的被豢养者。可悲的是，这“孱弱”也被归因成自己的无能，而不是土壤恶劣。</p><p>你忘了，被豢养者得不到任何人的尊重，包括豢养人。当真正需要拼杀出力、搜寻真相的时候，有人会发现，发声已无利器。是我们自断手脚，就不要嫉妒别人跑在前面。</p><p>唯有开放，才能进步，才能激发民族的锐气。</p><p>我们该醒了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Read </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Read </tag>
            
            <tag> 南风窗 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
